(()=>{"use strict";var t={298:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}},i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const s=n(r(658)),a=n(r(405)),o=n(r(626)),u=n(r(285)),l=r(609),d=i(r(346)),h=i(r(477)),g=n(r(810)),c=n(r(228)),f=n(r(187)),m=n(r(341)),p=n(r(793)),_=n(r(1)),E=n(r(814)),w=n(r(37)),C=n(r(517)),T=n(r(824)),x=n(r(398)),R=n(r(197)),S=n(r(442)),N=n(r(871)),y=n(r(193)),{word:I,string:b,greedyString:v,bool:A,integer:O,float:L}=l.DefaultType;t.exports={dispatcher:new s.default,word:I,string:b,greedyString:v,bool:A,integer:O,float:L,literal:d.literal,argument:h.argument,CommandDispatcher:s.default,LiteralMessage:a.default,ParseResults:o.default,StringReader:u.default,LiteralArgumentBuilder:d.default,RequiredArgumentBuilder:h.default,CommandContext:g.default,CommandContextBuilder:c.default,ParsedArgument:f.default,ParsedCommandNode:m.default,StringRange:p.default,SuggestionsContext:_.default,CommandSyntaxException:E.default,SimpleCommandExceptionType:C.default,DynamicCommandExceptionType:w.default,Suggestion:T.default,Suggestions:x.default,SuggestionsBuilder:R.default,ArgumentCommandNode:S.default,LiteralCommandNode:N.default,RootCommandNode:y.default}},658:function(t,e,r){var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,s){function a(t){try{u(n.next(t))}catch(t){s(t)}}function o(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){t.done?i(t.value):new r((function(e){e(t.value)})).then(a,o)}u((n=n.apply(t,e||[])).next())}))},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=i(r(626)),a=i(r(228)),o=i(r(814)),u=i(r(398)),l=i(r(197)),d=i(r(193)),h=i(r(285)),g=" ";e.default=class{constructor(t=null){this.consumer={onCommandComplete(){}},this.root=t||new d.default}register(t){let e=t.build();return this.root.addChild(e),e}setConsumer(t){this.consumer=t}execute(t,e=null){let r;if("string"==typeof t&&(t=new h.default(t)),t instanceof h.default?null!=e&&(r=this.parse(t,e)):r=t,r.getReader().canRead())throw 1===r.getExceptions().size?r.getExceptions().values().next().value:r.getContext().getRange().isEmpty()?o.default.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand().createWithContext(r.getReader()):o.default.BUILT_IN_EXCEPTIONS.dispatcherUnknownArgument().createWithContext(r.getReader());let n=0,i=0,s=!1,a=!1,u=r.getReader().getString(),l=r.getContext().build(u),d=[];d.push(l);let g=null;for(;null!=d;){for(let t=0;t<d.length;t++){let e=d[t],r=e.getChild();if(null!=r){if(s=s||e.isForked(),r.hasNodes()){a=!0;let t=e.getRedirectModifier();if(null==t)null==g&&(g=[]),g.push(r.copyFor(e.getSource()));else try{let n=t.apply(e);if(0!==n.length){null==g&&(g=[]);for(let t of n)g.push(r.copyFor(t))}}catch(t){if(this.consumer.onCommandComplete(e,!1,0),!s)throw t}}}else if(null!=e.getCommand()){a=!0;try{let t=e.getCommand()(e);n+=t,this.consumer.onCommandComplete(e,!0,t),i++}catch(t){if(this.consumer.onCommandComplete(e,!1,0),!s)throw t}}}d=g,g=null}if(!a)throw this.consumer.onCommandComplete(l,!1,0),o.default.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand().createWithContext(r.getReader());return s?i:n}parse(t,e){"string"==typeof t&&(t=new h.default(t));let r=new a.default(this,e,this.root,t.getCursor());return this.parseNodes(this.root,t,r)}parseNodes(t,e,r){let n=r.getSource(),i=null,u=null,l=e.getCursor();for(let d of t.getRelevantNodes(e)){if(!d.canUse(n))continue;let t=r.copy(),c=new h.default(e);try{if(d.parse(c,t),c.canRead()&&c.peek()!=g)throw o.default.BUILT_IN_EXCEPTIONS.dispatcherExpectedArgumentSeparator().createWithContext(c)}catch(t){null==i&&(i=new Map),i.set(d,t),c.setCursor(l);continue}if(t.withCommand(d.getCommand()),c.canRead(null==d.getRedirect()?2:1)){if(c.skip(),null!=d.getRedirect()){let e=new a.default(this,n,d.getRedirect(),c.getCursor()),r=this.parseNodes(d.getRedirect(),c,e);return t.withChild(r.getContext()),new s.default(t,r.getReader(),r.getExceptions())}{let e=this.parseNodes(d,c,t);null==u&&(u=[]),u.push(e)}}else null==u&&(u=[]),u.push(new s.default(t,c,new Map))}return null!=u?(u.length>1&&u.sort(((t,e)=>!t.getReader().canRead()&&e.getReader().canRead()?-1:t.getReader().canRead()&&!e.getReader().canRead()?1:0===t.getExceptions().size&&0!==e.getExceptions().size?-1:0!==t.getExceptions().size&&0===e.getExceptions().size?1:0)),u[0]):new s.default(r,e,null==i?new Map:i)}getAllUsage(t,e,r){const n=[];return this.__getAllUsage(t,e,n,"",r),n}__getAllUsage(t,e,r,n="",i){if(!i||t.canUse(e))if(null!=t.getCommand()&&r.push(n),null!=t.getRedirect()){const e=t.getRedirect()===this.root?"...":"-> "+t.getRedirect().getUsageText();r.push(0===n.length?t.getUsageText()+g+e:n+g+e)}else if(t.getChildrenCount()>0)for(let s of t.getChildren())this.__getAllUsage(s,e,r,0===n.length?s.getUsageText():n+g+s.getUsageText(),i)}getSmartUsage(t,e){let r=new Map,n=null!==t.getCommand();for(let i of t.getChildren()){let t=this.__getSmartUsage(i,e,n,!1);null!=t&&r.set(i,t)}return r}__getSmartUsage(t,e,r,n){if(!t.canUse(e))return null;let i=r?"["+t.getUsageText()+"]":t.getUsageText(),s=null!=t.getCommand(),a=s?"[":"(",o=s?"]":")";if(!n){if(null!=t.getRedirect()){let e=t.getRedirect()==this.root?"...":"-> "+t.getRedirect().getUsageText();return i+g+e}{let r=[...t.getChildren()].filter((t=>t.canUse(e)));if(1==r.length){let t=this.__getSmartUsage(r[0],e,s,s);if(null!=t)return i+g+t}else if(r.length>1){let t=new Set;for(let n of r){let r=this.__getSmartUsage(n,e,s,!0);null!=r&&t.add(r)}if(1===t.size){let e=t.values().next().value;return i+g+(s?"["+e+"]":e)}if(t.size>1){let t=a,e=0;for(let n of r)e>0&&(t+="|"),t+=n.getUsageText(),e++;if(e>0)return t+=o,i+g+t}}}}return i}getCompletionSuggestions(t,e=t.getReader().getTotalLength()){return n(this,void 0,void 0,(function*(){let r=t.getContext(),n=r.findSuggestionContext(e),i=n.parent,s=Math.min(n.startPos,e),a=t.getReader().getString(),o=a.substring(0,e),d=[];for(let t of i.getChildren()){let e=yield u.default.empty();try{e=yield t.listSuggestions(r.build(o),new l.default(o,s))}catch(t){}d.push(e)}return Promise.resolve(u.default.merge(a,d))}))}getRoot(){return this.root}getPath(t){let e=[];this.addPaths(this.root,e,[]);for(let r of e)if(r[r.length-1]===t){let t=[];for(let e of r)e!==this.root&&t.push(e.getName());return t}return[]}findNode(t){let e=this.root;for(let r of t)if(e=e.getChild(r),null==e)return null;return e}findAmbiguities(t){this.root.findAmbiguities(t)}addPaths(t,e,r){let n=[];n.push(...r),n.push(t),e.push(n);for(let r of t.getChildren())this.addPaths(r,e,n)}}},405:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){this.str=t}getString(){return this.str}toString(){return this.str}}},626:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(285));e.default=class{constructor(t,e,r){this.context=t,this.reader=e||new i.default(""),this.exceptions=r||new Map}getContext(){return this.context}getReader(){return this.reader}getExceptions(){return this.exceptions}}},285:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(814)),s='"';class a{constructor(t){this.cursor=0,"string"==typeof t?this.string=t:(this.string=t.string,this.cursor=t.cursor)}getString(){return this.string}setCursor(t){this.cursor=t}getRemainingLength(){return this.string.length-this.cursor}getTotalLength(){return this.string.length}getCursor(){return this.cursor}getRead(){return this.string.substring(0,this.cursor)}getRemaining(){return this.string.substring(this.cursor)}canRead(t=1){return this.cursor+t<=this.string.length}peek(t=0){return this.string.charAt(this.cursor+t)}read(){return this.string.charAt(this.cursor++)}skip(){this.cursor++}static isAllowedNumber(t){return t>="0"&&t<="9"||"."==t||"-"==t||"+"==t||"e"==t||"E"==t}skipWhitespace(){for(;this.canRead()&&/\s/.test(this.peek());)this.skip()}readInt(){let t=this.cursor;for(;this.canRead()&&a.isAllowedNumber(this.peek());)this.skip();let e=this.string.substring(t,this.cursor);if(0===e.length)throw i.default.BUILT_IN_EXCEPTIONS.readerExpectedInt().createWithContext(this);const r=parseInt(e);if(isNaN(r)||r!==parseFloat(e))throw this.cursor=t,i.default.BUILT_IN_EXCEPTIONS.readerInvalidInt().createWithContext(this,e);return r}readFloat(){let t=this.cursor;for(;this.canRead()&&a.isAllowedNumber(this.peek());)this.skip();let e=this.string.substring(t,this.cursor);if(0===e.length)throw i.default.BUILT_IN_EXCEPTIONS.readerExpectedFloat().createWithContext(this);const r=parseFloat(e),n=parseFloat(e.substring(r.toString().length,this.cursor));if(isNaN(r)||!isNaN(n)&&0!==n)throw this.cursor=t,i.default.BUILT_IN_EXCEPTIONS.readerInvalidFloat().createWithContext(this,e);return r}static isAllowedInUnquotedString(t){return t>="0"&&t<="9"||t>="A"&&t<="Z"||t>="a"&&t<="z"||"_"==t||"-"==t||"."==t||"+"==t}readUnquotedString(){let t=this.cursor;for(;this.canRead()&&a.isAllowedInUnquotedString(this.peek());)this.skip();return this.string.substring(t,this.cursor)}readQuotedString(){if(!this.canRead())return"";if(this.peek()!=s)throw i.default.BUILT_IN_EXCEPTIONS.readerExpectedStartOfQuote().createWithContext(this);this.skip();let t="",e=!1;for(;this.canRead();){let r=this.read();if(e){if(r!=s&&"\\"!=r)throw this.setCursor(this.getCursor()-1),i.default.BUILT_IN_EXCEPTIONS.readerInvalidEscape().createWithContext(this,r);t+=r,e=!1}else if("\\"==r)e=!0;else{if(r==s)return t;t+=r}}throw i.default.BUILT_IN_EXCEPTIONS.readerExpectedEndOfQuote().createWithContext(this)}readString(){return this.canRead()&&this.peek()===s?this.readQuotedString():this.readUnquotedString()}readBoolean(){let t=this.cursor,e=this.readString();if(0===e.length)throw i.default.BUILT_IN_EXCEPTIONS.readerExpectedBool().createWithContext(this);if("true"===e)return!0;if("false"===e)return!1;throw this.cursor=t,i.default.BUILT_IN_EXCEPTIONS.readerInvalidBool().createWithContext(this,e)}expect(t){if(!this.canRead()||this.peek()!==t)throw i.default.BUILT_IN_EXCEPTIONS.readerExpectedSymbol().createWithContext(this,t);this.skip()}}e.default=a},609:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(763)),s=n(r(425)),a=n(r(952)),o=n(r(749));e.DefaultType={bool:i.default.bool,integer:s.default.integer,float:a.default.float,word:o.default.word,string:o.default.string,greedyString:o.default.greedyString}},763:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});const r=["true","false"];class n{constructor(){}static bool(){return new n}static getBool(t,e){return t.getArgument(e,Boolean)}parse(t){return t.readBoolean()}listSuggestions(t,e){return"true".startsWith(e.getRemaining().toLowerCase())&&e.suggest("true"),"false".startsWith(e.getRemaining().toLowerCase())&&e.suggest("false"),e.buildPromise()}getExamples(){return r}}e.default=n},952:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(814)),s=["0","1.2",".5","-1","-.5","-1234.56"];class a{constructor(t,e){this.minimum=t,this.maximum=e}static float(t=-1/0,e=1/0){return new a(t,e)}static getFloat(t,e){return t.getArgument(e,Number)}getMinimum(){return this.minimum}getMaximum(){return this.maximum}parse(t){let e=t.getCursor(),r=t.readFloat();if(r<this.minimum)throw t.setCursor(e),i.default.BUILT_IN_EXCEPTIONS.integerTooLow().createWithContext(t,r,this.minimum);if(r>this.maximum)throw t.setCursor(e),i.default.BUILT_IN_EXCEPTIONS.integerTooHigh().createWithContext(t,r,this.maximum);return r}equals(t){return this===t||t instanceof a&&this.maximum==t.maximum&&this.minimum==t.minimum}toString(){return this.minimum===-1/0&&this.maximum===1/0?"float()":this.maximum==1/0?"float("+this.minimum+")":"float("+this.minimum+", "+this.maximum+")"}getExamples(){return s}}e.default=a},425:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(814)),s=["0","123","-123"];class a{constructor(t,e){this.minimum=t,this.maximum=e}static integer(t=-1/0,e=1/0){return new a(t,e)}static getInteger(t,e){return t.getArgument(e,Number)}getMinimum(){return this.minimum}getMaximum(){return this.maximum}parse(t){let e=t.getCursor(),r=t.readInt();if(r<this.minimum)throw t.setCursor(e),i.default.BUILT_IN_EXCEPTIONS.integerTooLow().createWithContext(t,r,this.minimum);if(r>this.maximum)throw t.setCursor(e),i.default.BUILT_IN_EXCEPTIONS.integerTooHigh().createWithContext(t,r,this.maximum);return r}equals(t){return this===t||t instanceof a&&this.maximum==t.maximum&&this.minimum==t.minimum}toString(){return this.minimum===-1/0&&this.maximum===1/0?"integer()":this.maximum==1/0?"integer("+this.minimum+")":"integer("+this.minimum+", "+this.maximum+")"}getExamples(){return s}}e.default=a},749:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(285));var s;!function(t){t.SINGLE_WORD="words_with_underscores",t.QUOTABLE_PHRASE='"quoted phrase"',t.GREEDY_PHRASE="words with spaces"}(s=e.StringType||(e.StringType={}));class a{constructor(t){this.type=t}static word(){return new a(s.SINGLE_WORD)}static string(){return new a(s.QUOTABLE_PHRASE)}static greedyString(){return new a(s.GREEDY_PHRASE)}static getString(t,e){return t.getArgument(e,String)}getType(){return this.type}parse(t){if(this.type==s.GREEDY_PHRASE){let e=t.getRemaining();return t.setCursor(t.getTotalLength()),e}return this.type==s.SINGLE_WORD?t.readUnquotedString():t.readString()}toString(){return"string()"}static escapeIfRequired(t){for(let e of t)if(!i.default.isAllowedInUnquotedString(e))return a.escape(t);return t}static escape(t){let e='"';for(let r=0;r<t.length;r++){const n=t.charAt(r);"\\"!=n&&'"'!=n||(e+="\\"),e+=n}return e+='"',e}}e.default=a},528:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(758)),s=n(r(193));e.default=class{constructor(){this.args=new s.default,this.modifier=null}then(t){if(null!=this.target)throw new Error("Cannot add children to a redirected node");return t instanceof i.default?this.args.addChild(t):this.args.addChild(t.build()),this.getThis()}getArguments(){return this.args.getChildren()}executes(t){return this.command=t,this.getThis()}getCommand(){return this.command}requires(t){return this.requirement=t,this.getThis()}getRequirement(){return this.requirement}redirect(t,e){return this.forward(t,null==e?null:t=>[e.apply(t)],!1)}fork(t,e){return this.forward(t,e,!0)}forward(t,e,r){if(this.args.getChildrenCount()>0)throw new Error("Cannot forward a node with children");return this.target=t,this.modifier=e,this.forks=r,this.getThis()}getRedirect(){return this.target}getRedirectModifier(){return this.modifier}isFork(){return this.forks}}},346:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(871)),s=n(r(528));class a extends s.default{constructor(t){super(),this.literal=t}static literal(t){return new a(t)}getThis(){return this}getLiteral(){return this.literal}build(){let t=new i.default(this.getLiteral(),this.getCommand(),this.getRequirement(),this.getRedirect(),this.getRedirectModifier(),this.isFork());for(let e of this.getArguments())t.addChild(e);return t}}e.default=a,e.literal=a.literal},477:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(442)),s=n(r(528));class a extends s.default{constructor(t,e){super(),this.name=t,this.type=e}static argument(t,e){return new a(t,e)}suggests(t){return this.suggestionsProvider=t,this.getThis()}getSuggestionsProvider(){return this.suggestionsProvider}getThis(){return this}getType(){return this.type}getName(){return this.name}build(){let t=new i.default(this.getName(),this.getType(),this.getCommand(),this.getRequirement(),this.getRedirect(),this.getRedirectModifier(),this.isFork(),this.getSuggestionsProvider());for(let e of this.getArguments())t.addChild(e);return t}}e.default=a,e.argument=a.argument},810:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(774));class s{constructor(t,e,r,n,i,s,a,o,u,l){this.source=t,this.input=e,this.args=r,this.command=n,this.rootNode=i,this.nodes=s,this.range=a,this.child=o,this.modifier=u,this.forks=l}copyFor(t){return this.source===t?this:new s(t,this.input,this.args,this.command,this.rootNode,this.nodes,this.range,this.child,this.modifier,this.forks)}getChild(){return this.child}getLastChild(){let t=this;for(;null!=t.getChild();)t=t.getChild();return t}getCommand(){return this.command}getSource(){return this.source}getArgument(t,e){const r=this.args.get(t);if(null==r)throw new Error("No such argument '"+t+"' exists on this command");let n=r.getResult();return null==e?n:e(n)}equals(t){return this===t||t instanceof s&&!!i.default(this.args,t.args)&&!!this.rootNode.equals(t.rootNode)&&!(this.nodes.length!=t.nodes.length||!i.default(this.nodes,t.nodes))&&!!(null!=this.command?i.default(this.command,t.command):null==t.command)&&!!i.default(this.source,t.source)&&!!(null!=this.child?this.child.equals(t.child):null==t.child)}getRedirectModifier(){return this.modifier}getRange(){return this.range}getInput(){return this.input}getRootNode(){return this.rootNode}getNodes(){return this.nodes}hasNodes(){return this.nodes.length>=0}isForked(){return this.forks}}e.default=s},228:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(793)),s=n(r(810)),a=n(r(1)),o=n(r(341));class u{constructor(t,e,r,n){this.args=new Map,this.nodes=[],this.modifier=null,this.rootNode=r,this.dispatcher=t,this.source=e,this.range=i.default.at(n)}withSource(t){return this.source=t,this}getSource(){return this.source}getRootNode(){return this.rootNode}withArgument(t,e){return this.args.set(t,e),this}getArguments(){return this.args}withCommand(t){return this.command=t,this}withNode(t,e){return this.nodes.push(new o.default(t,e)),this.range=i.default.encompassing(this.range,e),this.modifier=t.getRedirectModifier(),this.forks=t.isFork(),this}copy(){const t=new u(this.dispatcher,this.source,this.rootNode,this.range.getStart());return t.command=this.command,t.args=new Map([...t.args,...this.args]),t.nodes.push(...this.nodes),t.child=this.child,t.range=this.range,t.forks=this.forks,t}withChild(t){return this.child=t,this}getChild(){return this.child}getLastChild(){let t=this;for(;null!=t.getChild();)t=t.getChild();return t}getCommand(){return this.command}getNodes(){return this.nodes}build(t){return new s.default(this.source,t,this.args,this.command,this.rootNode,this.nodes,this.range,null==this.child?null:this.child.build(t),this.modifier,this.forks)}getDispatcher(){return this.dispatcher}getRange(){return this.range}findSuggestionContext(t){if(this.range.getStart()<=t){if(this.range.getEnd()<t){if(null!=this.child)return this.child.findSuggestionContext(t);if(this.nodes.length>0){let t=this.nodes[this.nodes.length-1];return new a.default(t.getNode(),t.getRange().getEnd()+1)}return new a.default(this.rootNode,this.range.getStart())}{let e=this.rootNode;for(let r of this.nodes){let n=r.getRange();if(n.getStart()<=t&&t<=n.getEnd())return new a.default(e,n.getStart());e=r.getNode()}if(null==e)throw new Error("Can't find node before cursor");return new a.default(e,this.range.getStart())}}throw new Error("Can't find node before cursor")}}e.default=u},187:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(793));class s{constructor(t,e,r){this.range=i.default.between(t,e),this.result=r}getRange(){return this.range}getResult(){return this.result}equals(t){return this===t||t instanceof s&&this.range.equals(t.range)&&this.result===t.result}}e.default=s},341:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class r{constructor(t,e){this.node=t,this.range=e}getNode(){return this.node}getRange(){return this.range}toString(){return this.node+"@"+this.range}equals(t){return this===t||null!=t&&t instanceof r&&this.node.equals(t.node)&&this.range.equals(t.range)}}e.default=r},793:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class r{constructor(t,e){this.start=t,this.end=e}static at(t){return new r(t,t)}static between(t,e){return new r(t,e)}static encompassing(t,e){return new r(Math.min(t.getStart(),e.getStart()),Math.max(t.getEnd(),e.getEnd()))}getStart(){return this.start}getEnd(){return this.end}get(t){return"string"==typeof t?t.substring(this.start,this.end):t.getString().substring(this.start,this.end)}isEmpty(){return this.start===this.end}getLength(){return this.end-this.start}equals(t){return this===t||t instanceof r&&this.start===t.start&&this.end==t.end}toString(){return"StringRange{start="+this.start+", end="+this.end+"}"}}e.default=r},1:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t,e){this.parent=t,this.startPos=e}}},288:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(405)),s=n(r(517)),a=n(r(37));class o{floatTooLow(){return o.FLOAT_TOO_SMALL}floatTooHigh(){return o.FLOAT_TOO_BIG}integerTooLow(){return o.INTEGER_TOO_SMALL}integerTooHigh(){return o.INTEGER_TOO_BIG}literalIncorrect(){return o.LITERAL_INCORRECT}readerExpectedStartOfQuote(){return o.READER_EXPECTED_START_OF_QUOTE}readerExpectedEndOfQuote(){return o.READER_EXPECTED_END_OF_QUOTE}readerInvalidEscape(){return o.READER_INVALID_ESCAPE}readerInvalidBool(){return o.READER_INVALID_BOOL}readerInvalidInt(){return o.READER_INVALID_INT}readerExpectedInt(){return o.READER_EXPECTED_INT}readerInvalidFloat(){return o.READER_INVALID_FLOAT}readerExpectedFloat(){return o.READER_EXPECTED_FLOAT}readerExpectedBool(){return o.READER_EXPECTED_BOOL}readerExpectedSymbol(){return o.READER_EXPECTED_SYMBOL}dispatcherUnknownCommand(){return o.DISPATCHER_UNKNOWN_COMMAND}dispatcherUnknownArgument(){return o.DISPATCHER_UNKNOWN_ARGUMENT}dispatcherExpectedArgumentSeparator(){return o.DISPATCHER_EXPECTED_ARGUMENT_SEPARATOR}dispatcherParseException(){return o.DISPATCHER_PARSE_EXCEPTION}}o.FLOAT_TOO_SMALL=new a.default(((t,e)=>new i.default("Float must not be less than "+e+", found "+t))),o.FLOAT_TOO_BIG=new a.default(((t,e)=>new i.default("Float must not be more than "+e+", found "+t))),o.INTEGER_TOO_SMALL=new a.default(((t,e)=>new i.default("Integer must not be less than "+e+", found "+t))),o.INTEGER_TOO_BIG=new a.default(((t,e)=>new i.default("Integer must not be more than "+e+", found "+t))),o.LITERAL_INCORRECT=new a.default((t=>new i.default("Expected literal "+t))),o.READER_EXPECTED_START_OF_QUOTE=new s.default(new i.default("Expected quote to start a string")),o.READER_EXPECTED_END_OF_QUOTE=new s.default(new i.default("Unclosed quoted string")),o.READER_INVALID_ESCAPE=new a.default((t=>new i.default("Invalid escape sequence '"+t+"' in quoted string"))),o.READER_INVALID_BOOL=new a.default((t=>new i.default("Invalid bool, expected true or false but found '"+t+"'"))),o.READER_INVALID_INT=new a.default((t=>new i.default("Invalid integer '"+t+"'"))),o.READER_EXPECTED_INT=new s.default(new i.default("Expected integer")),o.READER_INVALID_FLOAT=new a.default((t=>new i.default("Invalid float '"+t+"'"))),o.READER_EXPECTED_FLOAT=new s.default(new i.default("Expected float")),o.READER_EXPECTED_BOOL=new s.default(new i.default("Expected bool")),o.READER_EXPECTED_SYMBOL=new a.default((t=>new i.default("Expected '"+t+"'"))),o.DISPATCHER_UNKNOWN_COMMAND=new s.default(new i.default("Unknown command")),o.DISPATCHER_UNKNOWN_ARGUMENT=new s.default(new i.default("Incorrect argument for command")),o.DISPATCHER_EXPECTED_ARGUMENT_SEPARATOR=new s.default(new i.default("Expected whitespace to end one argument, but found trailing data")),o.DISPATCHER_PARSE_EXCEPTION=new a.default((t=>new i.default("Could not parse command: "+t))),e.default=o},814:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(288));class s extends Error{constructor(t,e,r=null,n=-1){super(e.getString()),Error.captureStackTrace(this,s),this.type=t,this.__message=e,this.input=r,this.cursor=n,this.message=this.getMessage()}getMessage(){let t=this.__message.getString(),e=this.getContext();return null!=e&&(t+=" at position "+this.cursor+": "+e),t}getRawMessage(){return this.__message}getContext(){if(null==this.input||this.cursor<0)return null;let t="",e=Math.min(this.input.length,this.cursor);return e>s.CONTEXT_AMOUNT&&(t+="..."),t+=this.input.substring(Math.max(0,e-s.CONTEXT_AMOUNT),e),t+="<--[HERE]",t}getType(){return this.type}getInput(){return this.input}getCursor(){return this.cursor}toString(){return this.message}}s.CONTEXT_AMOUNT=10,s.BUILT_IN_EXCEPTIONS=new i.default,e.default=s},37:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(814));class s{constructor(t){this.fn=t,Error.captureStackTrace(this,s)}create(...t){return new i.default(this,this.fn(...t))}createWithContext(t,...e){return new i.default(this,this.fn(...e),t.getString(),t.getCursor())}}e.default=s},517:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(814));class s{constructor(t){this.message=t,Error.captureStackTrace(this,s)}create(){return new i.default(this,this.message)}createWithContext(t){return new i.default(this,this.message,t.getString(),t.getCursor())}toString(){return this.message.getString()}}e.default=s},581:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(824));class s extends i.default{constructor(t,e,r=null){super(t,e.toString(),r),this.value=e}getValue(){return this.value}equals(t){return this===t||t instanceof s&&this.value==t.value&&super.equals(t)}toString(){return"IntegerSuggestion{value="+this.value+", range="+this.getRange()+", text='"+this.getText()+"', tooltip='"+this.getTooltip()+"'}"}compareTo(t){return t instanceof s?this.value<t.value?1:-1:super.compareTo(t)}compareToIgnoreCase(t){return this.compareTo(t)}}e.default=s},824:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(774));class s{constructor(t,e,r=null){this.range=t,this.text=e,this.tooltip=r}getRange(){return this.range}getText(){return this.text}getTooltip(){return this.tooltip}apply(t){if(0===this.range.getStart()&&this.range.getEnd()==t.length)return this.text;let e="";return this.range.getStart()>0&&(e+=t.substring(0,this.range.getStart())),e+=this.text,this.range.getEnd()<t.length&&(e+=t.substring(this.range.getEnd())),e}equals(t){return this===t||t instanceof s&&i.default(this.range,t.range)&&this.text===t.text&&i.default(this.tooltip,t.tooltip)}toString(){return"Suggestion{range="+this.range+", text='"+this.text+"', tooltip='"+this.tooltip+"'}"}compareTo(t){return this.text<t.text?1:-1}compareToIgnoreCase(t){return this.text.toLowerCase()<t.text.toLowerCase()?1:-1}expand(t,e){if(e.equals(this.range))return this;let r="";return e.getStart()<this.range.getStart()&&(r+=t.substring(e.getStart(),this.range.getStart())),r+=this.text,e.getEnd()>this.range.getEnd()&&(r+=t.substring(this.range.getEnd(),e.getEnd())),new s(e,r,this.tooltip)}}e.default=s},398:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(774)),s=n(r(793));class a{constructor(t,e){this.range=t,this.suggestions=e}getRange(){return this.range}getList(){return this.suggestions}isEmpty(){return 0===this.suggestions.length}equals(t){return this===t||t instanceof a&&this.range.equals(t.range)&&i.default(this.suggestions,t.suggestions)}toString(){return"Suggestions{range="+this.range+", suggestions="+this.suggestions+"}"}static empty(){return Promise.resolve(this.EMPTY)}static merge(t,e){if(0===e.length)return this.EMPTY;if(1===e.length)return e[0];const r=[];for(let t of e)r.push(...t.getList());return a.create(t,r)}static create(t,e){if(0===e.length)return this.EMPTY;let r=1/0,n=-1/0;for(let t of e)r=Math.min(t.getRange().getStart(),r),n=Math.max(t.getRange().getEnd(),n);let i=new s.default(r,n);const o=[];for(let r of e)o.push(r.expand(t,i));const u=o.sort(((t,e)=>t.compareToIgnoreCase(e)));return new a(i,u)}}a.EMPTY=new a(s.default.at(0),[]),e.default=a},197:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(793)),s=n(r(824)),a=n(r(398)),o=n(r(581));class u{constructor(t,e){this.result=[],this.input=t,this.start=e,this.remaining=t.substring(e)}getInput(){return this.input}getStart(){return this.start}getRemaining(){return this.remaining}build(){return a.default.create(this.input,this.result)}buildPromise(){return Promise.resolve(this.build())}suggest(t,e=null){return"number"==typeof t?(this.result.push(new o.default(i.default.between(this.start,this.input.length),t,e)),this):(t===this.remaining||this.result.push(new s.default(i.default.between(this.start,this.input.length),t,e)),this)}add(t){return this.result.push(...t.result),this}createOffset(t){return new u(this.input,this.start)}restart(){return new u(this.input,this.start)}}e.default=u},442:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(774)),s=n(r(285)),a=n(r(477)),o=n(r(187)),u=n(r(398)),l=n(r(758));class d extends l.default{constructor(t,e,r,n,i,s,a,o){super(r,n,i,s,a),this.name=t,this.type=e,this.customSuggestions=o}getNodeType(){return"argument"}getType(){return this.type}getName(){return this.name}getUsageText(){return"<"+this.name+">"}getCustomSuggestions(){return this.customSuggestions}parse(t,e){let r=t.getCursor(),n=this.type.parse(t),i=new o.default(r,t.getCursor(),n);e.withArgument(this.name,i),e.withNode(this,i.getRange())}listSuggestions(t,e){return null==this.customSuggestions?"function"==typeof this.type.listSuggestions?this.type.listSuggestions(t,e):u.default.empty():this.customSuggestions.getSuggestions(t,e)}createBuilder(){let t=a.default.argument(this.name,this.type);return t.requires(this.getRequirement()),t.forward(this.getRedirect(),this.getRedirectModifier(),this.isFork()),t.suggests(this.customSuggestions),null!=this.getCommand()&&t.executes(this.getCommand()),t}isValidInput(t){try{let e=new s.default(t);return this.type.parse(e),!e.canRead()||" "==e.peek()}catch(t){}return!1}equals(t){return this===t||t instanceof d&&this.name===t.name&&!!i.default(this.type,t.type)&&super.equals(t)}getSortedKey(){return this.name}getExamples(){return"function"==typeof this.type.getExamples?this.type.getExamples():[]}toString(){return"<argument "+this.name+":"+this.type+">"}}e.default=d},758:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(774));class s{constructor(t,e,r,n,i){this.children=new Map,this.literals=new Map,this.args=new Map,this.command=t,this.requirement=e||(()=>!0),this.redirect=r,this.modifier=n,this.forks=i}getCommand(){return this.command}getChildren(){return this.children.values()}getChildrenCount(){return this.children.size}getChild(t){return this.children.get(t)}getRedirect(){return this.redirect}getRedirectModifier(){return this.modifier}canUse(t){return this.requirement(t)}addChild(t){if("root"===t.getNodeType())throw new Error("Cannot add a RootCommandNode as a child to any other CommandNode");let e=this.children.get(t.getName());if(null!=e){null!=t.getCommand()&&(e.command=t.getCommand());for(let r of t.getChildren())e.addChild(r)}else this.children.set(t.getName(),t),"literal"===t.getNodeType()?this.literals.set(t.getName(),t):"argument"===t.getNodeType()&&this.args.set(t.getName(),t);this.children=new Map([...this.children.entries()].sort(((t,e)=>t[1].compareTo(e[1]))))}findAmbiguities(t){let e=[];for(let r of this.children.values()){for(let n of this.children.values())if(r!==n){for(let t of r.getExamples())n.isValidInput(t)&&e.push(t);e.length>0&&(t.ambiguous(this,r,n,e),e=[])}r.findAmbiguities(t)}}equals(t){return this===t||t instanceof s&&this.children.size===t.children.size&&!!i.default(this.children,t.children)&&!!(null!=this.command?i.default(this.command,t.command):null==t.command)}getRequirement(){return this.requirement}getRelevantNodes(t){if(this.literals.size>0){let e=t.getCursor();for(;t.canRead()&&" "!=t.peek();)t.skip();let r=t.getString().substring(e,t.getCursor());t.setCursor(e);let n=this.literals.get(r);return null!=n?[n]:this.args.values()}return this.args.values()}compareTo(t){return this.getNodeType()===t.getNodeType()?this.getSortedKey()>t.getSortedKey()?1:-1:"literal"===t.getNodeType()?1:-1}isFork(){return this.forks}}e.default=s},871:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(758)),s=n(r(285)),a=n(r(346)),o=n(r(793)),u=n(r(814)),l=n(r(398));class d extends i.default{constructor(t,e,r,n,i,s){super(e,r,n,i,s),this.literal=t}getNodeType(){return"literal"}getLiteral(){return this.literal}getName(){return this.literal}parse(t,e){let r=t.getCursor(),n=this.__parse(t);if(!(n>-1))throw u.default.BUILT_IN_EXCEPTIONS.literalIncorrect().createWithContext(t,this.literal);e.withNode(this,o.default.between(r,n))}__parse(t){let e=t.getCursor();if(t.canRead(this.literal.length)){let r=e+this.literal.length;if(t.getString().substring(e,r)===this.literal){if(t.setCursor(r),!t.canRead()||" "==t.peek())return r;t.setCursor(e)}}return-1}listSuggestions(t,e){return this.literal.toLowerCase().startsWith(e.getRemaining().toLowerCase())?e.suggest(this.literal).buildPromise():l.default.empty()}isValidInput(t){return this.__parse(new s.default(t))>-1}equals(t){return this===t||t instanceof d&&this.literal===t.literal&&super.equals(t)}getUsageText(){return this.literal}createBuilder(){let t=a.default.literal(this.literal);return t.requires(this.getRequirement()),t.forward(this.getRedirect(),this.getRedirectModifier(),this.isFork()),null!=this.getCommand()&&t.executes(this.getCommand()),t}getSortedKey(){return this.literal}getExamples(){return[this.literal]}toString(){return"<literal "+this.literal+">"}}e.default=d},193:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(758)),s=n(r(398));class a extends i.default{constructor(){super(null,(t=>!0),null,(t=>t.getSource()),!1)}getNodeType(){return"root"}getName(){return""}getUsageText(){return""}parse(t,e){}listSuggestions(t,e){return s.default.empty()}isValidInput(t){return!1}equals(t){return this===t||t instanceof a&&super.equals(t)}createBuilder(){throw new Error("Cannot convert root into a builder")}getSortedKey(){return""}getExamples(){return[]}toString(){return"<root>"}}e.default=a},774:(t,e)=>{function r(t,e){return t===e||typeof t==typeof e&&t instanceof Object&&("function"==typeof t?t.toString()===e.toString():t.constructor===e.constructor&&(t instanceof Map?function(t,e){if(t.size!=e.size)return!1;for(let[n,i]of t){const t=e.get(n);if(!r(t,i))return!1;if(void 0===t&&!e.has(n))return!1}return!0}(t,e):t instanceof Set?n([...t],[...e]):t instanceof Array?n(t,e):"object"==typeof t&&function(t,e){const n=Object.keys(t),i=Object.keys(e);return n.length==i.length&&!!n.every((t=>e.hasOwnProperty(t)))&&n.every((n=>r(t[n],e[n])))}(t,e)))}function n(t,e){if(t.length!=e.length)return!1;for(let n=0;n<t.length;n++)if(!r(t[n],e[n]))return!1;return!0}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var s=e[n]={exports:{}};return t[n].call(s.exports,s,s.exports,r),s.exports}(()=>{var t=r(298);class e{static readLocationLiteral(e){let r=e.getCursor();for(;e.canRead()&&(t.StringReader.isAllowedNumber(e.peek())||"~"==(n=e.peek())||"^"==n);)e.skip();var n;let i=e.getString().substring(r,e.getCursor());if(0===i.length)throw t.CommandSyntaxException.BUILT_IN_EXCEPTIONS.readerExpectedInt().createWithContext(e);if(i.startsWith("~")||i.startsWith("^")){if(1===i.length)return 0;i=i.slice(1)}const s=parseInt(i);if(isNaN(s)||s!==parseFloat(i))throw e.setCursor(r),t.CommandSyntaxException.BUILT_IN_EXCEPTIONS.readerInvalidInt().createWithContext(e,i);return s}}class n{static suggest(t,e){let r=e.getRemaining().toLowerCase();for(let i of t)n.matchesSubStr(r,i.toLowerCase())&&e.suggest(i);return e.buildPromise()}static matchesSubStr(t,e){let r=0;for(;!e.startsWith(t,r);){if(r=e.indexOf("_",r),r<0)return!1;r++}return!0}}class i{static UNITS=new Map([["d",24e3],["s",20],["t",1],["",1]]);ticks;constructor(t=0){this.ticks=t}parse(e){const r=e.readFloat(),n=e.readUnquotedString(),s=i.UNITS.get(n);if(0===s)throw new t.SimpleCommandExceptionType(new t.LiteralMessage(`Invalid unit "${n}"`)).createWithContext(e);const a=Math.round(r*s);if(a<0)throw new t.SimpleCommandExceptionType(new t.LiteralMessage("Tick count must be non-negative")).createWithContext(e);return this.ticks=a,this}listSuggestions(e,r){let s=new t.StringReader(r.getRemaining());try{s.readFloat()}catch(t){return r.buildPromise()}return n.suggest([...i.UNITS.keys()],r.createOffset(r.getStart()+s.getCursor()))}getExamples(){return["0d","0s","0t","0"]}}class s{x;y;z;constructor(t=0,e=0,r=0){this.x=t,this.y=e,this.z=r}parse(t){return this.x=e.readLocationLiteral(t),t.skip(),this.y=e.readLocationLiteral(t),t.skip(),this.z=e.readLocationLiteral(t),this}listSuggestions(t,e){return e.suggest("~"),e.suggest("~ ~"),e.suggest("~ ~ ~"),e.buildPromise()}getExamples(){return["1 2 3"]}}class a{x;z;constructor(t=0,e=0){this.x=t,this.z=e}parse(t){return this.x=e.readLocationLiteral(t),t.skip(),this.z=e.readLocationLiteral(t),this}listSuggestions(t,e){return e.suggest("~"),e.suggest("~ ~"),e.buildPromise()}getExamples(){return["1 2"]}}class o{username;constructor(t=""){this.username=t}parse(e){const r=e.getCursor();for(;e.canRead()&&" "!==e.peek();)e.skip();const n=e.getString(),i=e.getCursor();if(this.username=n.slice(r,i),!this.username.match(/^[A-Za-z0-9_]{2,16}$/))throw new t.SimpleCommandExceptionType(new t.LiteralMessage(this.username+" is not a valid username")).createWithContext(e);return this}listSuggestions(e,r){return t.Suggestions.empty()}getExamples(){return["Skepter"]}}class u{literals;selectedLiteral;constructor(t){this.literals=t,this.selectedLiteral=""}parse(e){const r=e.getCursor();for(;e.canRead()&&" "!==e.peek();)e.skip();if(this.selectedLiteral=e.getString().slice(r,e.getCursor()),this.selectedLiteral.endsWith(" ")&&(this.selectedLiteral.trimEnd(),e.setCursor(e.getCursor()-1)),!this.literals.includes(this.selectedLiteral))throw new t.SimpleCommandExceptionType(new t.LiteralMessage(this.selectedLiteral+" is not one of "+this.literals)).createWithContext(e);return this}listSuggestions(t,e){for(let t of this.literals)e.suggest(t);return e.buildPromise()}getExamples(){return["blah"]}}class l{static ChatColor={black:"§0",dark_blue:"§1",dark_green:"§2",dark_aqua:"§3",dark_red:"§4",dark_purple:"§5",gold:"§6",gray:"§7",dark_gray:"§8",blue:"§9",green:"§a",aqua:"§b",red:"§c",light_purple:"§d",yellow:"§e",white:"§f"};chatcolor;constructor(t=null){this.chatcolor=t}parse(e){let r=e.readUnquotedString(),n=l.ChatColor[r.toLowerCase()];if(void 0===n)throw new t.SimpleCommandExceptionType(new t.LiteralMessage(`Unknown colour '${r}'`)).createWithContext(e);return this.chatcolor=n,this}listSuggestions(t,e){return n.suggest(Object.keys(l.ChatColor),e)}getExamples(){return["red","green"]}}class d extends t.CommandDispatcher{root;constructor(t){super(t),this.root=t}deleteAll(){this.root=new t.RootCommandNode(void 0,void 0,void 0,void 0,void 0)}getRoot(){return this.root}}const h=void 0,g=document.getElementById("cmd-input"),c=document.getElementById("cmd-input-autocomplete"),f=document.getElementById("error-box"),m=document.getElementById("suggestions-box"),p=document.getElementById("valid-box"),_=document.getElementById("commands"),E=new d;var w;!function(t){t.BLACK="§0",t.DARK_BLUE="§1",t.DARK_GREEN="§2",t.DARK_AQUA="§3",t.DARK_RED="§4",t.DARK_PURPLE="§5",t.GOLD="§6",t.GRAY="§7",t.DARK_GRAY="§8",t.BLUE="§9",t.GREEN="§a",t.AQUA="§b",t.RED="§c",t.LIGHT_PURPLE="§d",t.YELLOW="§e",t.WHITE="§f"}(w||(w={}));const C=new Map([["0","black"],["1","dark_blue"],["2","dark_green"],["3","dark_aqua"],["4","dark_red"],["5","dark_purple"],["6","gold"],["7","gray"],["8","dark_gray"],["9","blue"],["a","green"],["b","aqua"],["c","red"],["d","light_purple"],["e","yellow"],["f","white"]]),T=new Map;for(let[t,e]of C)T.set(e,t);const x={0:w.AQUA,1:w.YELLOW,2:w.GREEN,3:w.LIGHT_PURPLE,4:w.GOLD},R=new Map([["api:entity",()=>null],["api:entities",()=>null],["api:player",()=>null],["api:players",()=>null],["api:greedy_string",()=>(0,t.greedyString)()],["brigadier:bool",()=>(0,t.bool)()],["brigadier:double",()=>(0,t.float)()],["brigadier:float",()=>(0,t.float)()],["brigadier:integer",()=>(0,t.integer)()],["brigadier:long",()=>(0,t.integer)()],["brigadier:string",()=>(0,t.string)()],["minecraft:angle",()=>null],["minecraft:block_pos",()=>new s],["minecraft:block_predicate",()=>null],["minecraft:block_state",()=>null],["minecraft:color",()=>new l],["minecraft:column_pos",()=>new a],["minecraft:component",()=>null],["minecraft:dimension",()=>null],["minecraft:entity",()=>null],["minecraft:entity_anchor",()=>null],["minecraft:entity_summon",()=>null],["minecraft:float_range",()=>null],["minecraft:function",()=>null],["minecraft:game_profile",()=>new o],["minecraft:int_range",()=>null],["minecraft:item_enchantment",()=>null],["minecraft:item_predicate",()=>null],["minecraft:item_slot",()=>null],["minecraft:item_stack",()=>null],["minecraft:message",()=>null],["minecraft:mob_effect",()=>null],["minecraft:nbt",()=>null],["minecraft:nbt_compound_tag",()=>null],["minecraft:nbt_path",()=>null],["minecraft:nbt_tag",()=>null],["minecraft:objective",()=>null],["minecraft:objective_criteria",()=>null],["minecraft:operation",()=>null],["minecraft:particle",()=>null],["minecraft:resource_location",()=>null],["minecraft:rotation",()=>null],["minecraft:score_holder",()=>null],["minecraft:scoreboard_slot",()=>null],["minecraft:swizzle",()=>null],["minecraft:team",()=>null],["minecraft:time",()=>new i],["minecraft:uuid",()=>null],["minecraft:vec2",()=>null],["minecraft:vec3",()=>null]]);function S(e){if(0===e.trim().length)return;function r(e){if(e.includes("..")){let r=e.split("..")[0],n=e.split("..")[1],i=Number.MIN_SAFE_INTEGER,s=Number.MAX_SAFE_INTEGER;return i=0===r.length?Number.MIN_SAFE_INTEGER:Number.parseFloat(r),s=0===n.length?Number.MAX_SAFE_INTEGER:Number.parseFloat(n),i%1!=0||s%1!=0?(0,t.float)(i,s):(s+=1,(0,t.integer)(i,s))}{const t=R.get(e);return t()?t():(console.error("Unimplemented argument: "+e),null)}}const n=e.split(" ")[0],i=e.split(" ").slice(1);let s=(0,t.literal)(n),a=[];const o=RegExp(/\((\w+(?:\|\w+)*)\)/),l=RegExp(/<(\w+)>\[([a-z:_]+|(?:[0-9\.]+)?\.\.(?:[0-9\.]+)?)\]/);for(let e of i){const n=e.match(o),i=e.match(l);if(n){const e=n[1].split("|");1===e.length?a.unshift((0,t.literal)(e[0])):e.length>1&&a.unshift((0,t.argument)(n[1],new u(e)))}else if(i){const e=i[1];let n=r(i[2]);a.unshift((0,t.argument)(e,n))}}if(a.length>0){const t=a[0].executes((t=>0));a.shift();const e=a.reduce(((t,e)=>e.then(t)),t);s=s.then(e)}E.register(s)}function N(){const t=document.getSelection();t.modify("extend","backward","paragraphboundary");const e=t.toString().length;return void 0!==t.anchorNode&&null!==t.anchorNode&&t.collapseToEnd(),e}function y(t,e){if(t>=0){const r=(t,e,n)=>{if(n||((n=document.createRange()).selectNode(t),n.setStart(t,0)),0===e.count)n.setEnd(t,e.count);else if(t&&e.count>0)if(t.nodeType===Node.TEXT_NODE){const r=t.textContent.length;r<e.count?e.count-=r:(n.setEnd(t,e.count),e.count=0)}else for(let i=0;i<t.childNodes.length&&(n=r(t.childNodes[i],e,n),0!==e.count);i++);return n};let n=r(e,{count:t});if(n){n.collapse(!1);let t=window.getSelection();t.removeAllRanges(),t.addRange(n)}}}class I{static canvas;static getTextWidth(t,e){const r=(I.canvas||(I.canvas=document.createElement("canvas"))).getContext("2d");return r.font=e.currentFont||(e.currentFont=I.getCanvasFont(e)),r.measureText(t).width}static getCssStyle(t,e){return window.getComputedStyle(t).getPropertyValue(e)}static getCanvasFont(t=document.body){return`${I.getCssStyle(t,"font-weight")||"normal"} ${I.getCssStyle(t,"font-size")||"16px"} ${I.getCssStyle(t,"font-family")||"Times New Roman"}`}}function b(t,e=null){if(t=t.replaceAll(" "," "),e||(e=g),e.innerHTML="",e===g){let t=document.createElement("span");t.innerText="/",e.appendChild(t)}let r="",n="";function i(t){if(r.length>0){let e=document.createElement("span");e.className=n,e.innerText=r,t.appendChild(e),r=""}}for(let s=0;s<t.length;s++)"§"!==t[s]?r+=t[s]:(i(e),n=C.get(t[s+1]),s++);i(e)}g.oninput=async function(){let t=N(),e=g.innerText.replace("\n","");e=e.replaceAll(" "," ");let r=!1,n="",i=[],s=!1;if(e.startsWith("/")){const t=e.slice(1),a=t.split(" ")[0],o=E.parse(t,h),u=E.parse(t.trimEnd(),h);console.log(o);let l=u.getContext().getRootNode();u.getContext().getNodes().length>0&&(l=u.getContext().getNodes()[u.getContext().getNodes().length-1].getNode());const d=E.getAllUsage(l,h,!1).join(" ");if(b(t),o.getExceptions().size>0)b(w.RED+t),n=o.getExceptions().entries().next().value[1].message;else{try{E.execute(o)}catch(e){b(w.RED+t),n=e.message,n.startsWith("Unknown command at position")&&(n=d,r=!0)}""===n&&(s=!0)}if(r||s){let e=a,r=0;for(const[n,i]of o.getContext().getArguments())r>Object.keys(x).length&&(r=0),e+=" ",e+=x[r],e+=t.slice(i.getRange().getStart(),i.getRange().getEnd()),r++;e+="".padEnd(t.length-t.trimEnd().length),b(e)}i=(await E.getCompletionSuggestions(o)).getList().map((t=>t.getText())),console.log(i)}if(0===t&&e.length>0&&(t=1),y(t,g),g.focus(),0!==n.length?(b(n,f),f.hidden=!1):f.hidden=!0,r?(f.style.left=I.getTextWidth(e,g)+"px",f.style.width=`calc(100% - ${f.style.left} - 28px + 10px)`):(f.style.left="0",f.style.width="unset"),s?(b(w.GREEN+"This command is valid ✅",p),p.hidden=!1):p.hidden=!0,m.style.left="0",0!==i.length){m.innerHTML="";for(let t of(t=>{let e=[];for(let r=0;r<t.length;r++){const n=document.createElement("span");n.innerText=t[r],0===r&&(n.className="yellow"),r!==t.length-1&&(n.innerText+="\n"),e.push(n)}return e})(i))m.appendChild(t);m.style.left=I.getTextWidth(e,g)+"px",m.hidden=!1,f.hidden=!0}else m.hidden=!0;window.dispatchEvent(new Event("suggestionsUpdated"))},g.addEventListener("keydown",(t=>{switch(t.key){case"Enter":t.preventDefault();break;case"ArrowDown":case"ArrowUp":if(!m.hidden)for(let e=0;e<m.children.length;e++)if("yellow"===m.children[e].className){m.children[e].className="","ArrowDown"==t.key?e===m.children.length-1?m.children[0].className="yellow":m.children[e+1].className="yellow":0===e?m.children[m.children.length-1].className="yellow":m.children[e-1].className="yellow",window.dispatchEvent(new Event("suggestionsUpdated"));break}break;case"Backspace":0===g.innerText.replace("\n","").length&&t.preventDefault();break;case"Tab":t.preventDefault(),b(function(t=!0){let e="";for(let r of g.children)r.className&&t&&(e+="§"+T.get(r.className)),e+=r.innerText;return e}(!1).slice(1)+c.innerText),g.oninput(null),y(g.innerText.length,g)}})),window.addEventListener("suggestionsUpdated",(t=>{let e=g.innerText;if(m.hidden)b("",c);else{let t=document.querySelector(".yellow").innerText.trim();if(e!==t){let r=N();b(w.DARK_GRAY+t.slice(e.length-1),c),y(r,g),g.focus()}else b("",c)}})),document.getElementById("chatbox").onclick=function(){g.focus()},document.getElementById("register-commands-button").onclick=function(){E.deleteAll(),_.value.split("\n").forEach(S),g.oninput(null)},_.value="fill <pos1>[minecraft:block_pos] <pos2>[minecraft:block_pos] <block>[brigadier:string]\nspeed (walk|fly) <speed>[0..10] <target>[minecraft:game_profile]\nhello <val>[1..20] <color>[minecraft:color]",document.getElementById("register-commands-button")?.onclick(null),console.log("Dispatcher",E.getRoot())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,