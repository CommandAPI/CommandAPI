(()=>{"use strict";var e={298:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const s=n(r(658)),a=n(r(405)),o=n(r(626)),u=n(r(285)),l=r(609),d=i(r(346)),h=i(r(477)),c=n(r(810)),g=n(r(228)),f=n(r(187)),m=n(r(341)),p=n(r(793)),_=n(r(1)),E=n(r(814)),w=n(r(37)),C=n(r(517)),x=n(r(824)),T=n(r(398)),S=n(r(197)),R=n(r(442)),y=n(r(871)),N=n(r(193)),{word:b,string:I,greedyString:v,bool:A,integer:L,float:M}=l.DefaultType;e.exports={dispatcher:new s.default,word:b,string:I,greedyString:v,bool:A,integer:L,float:M,literal:d.literal,argument:h.argument,CommandDispatcher:s.default,LiteralMessage:a.default,ParseResults:o.default,StringReader:u.default,LiteralArgumentBuilder:d.default,RequiredArgumentBuilder:h.default,CommandContext:c.default,CommandContextBuilder:g.default,ParsedArgument:f.default,ParsedCommandNode:m.default,StringRange:p.default,SuggestionsContext:_.default,CommandSyntaxException:E.default,SimpleCommandExceptionType:C.default,DynamicCommandExceptionType:w.default,Suggestion:x.default,Suggestions:T.default,SuggestionsBuilder:S.default,ArgumentCommandNode:R.default,LiteralCommandNode:y.default,RootCommandNode:N.default}},658:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function a(e){try{u(n.next(e))}catch(e){s(e)}}function o(e){try{u(n.throw(e))}catch(e){s(e)}}function u(e){e.done?i(e.value):new r((function(t){t(e.value)})).then(a,o)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(r(626)),a=i(r(228)),o=i(r(814)),u=i(r(398)),l=i(r(197)),d=i(r(193)),h=i(r(285)),c=" ";t.default=class{constructor(e=null){this.consumer={onCommandComplete(){}},this.root=e||new d.default}register(e){let t=e.build();return this.root.addChild(t),t}setConsumer(e){this.consumer=e}execute(e,t=null){let r;if("string"==typeof e&&(e=new h.default(e)),e instanceof h.default?null!=t&&(r=this.parse(e,t)):r=e,r.getReader().canRead())throw 1===r.getExceptions().size?r.getExceptions().values().next().value:r.getContext().getRange().isEmpty()?o.default.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand().createWithContext(r.getReader()):o.default.BUILT_IN_EXCEPTIONS.dispatcherUnknownArgument().createWithContext(r.getReader());let n=0,i=0,s=!1,a=!1,u=r.getReader().getString(),l=r.getContext().build(u),d=[];d.push(l);let c=null;for(;null!=d;){for(let e=0;e<d.length;e++){let t=d[e],r=t.getChild();if(null!=r){if(s=s||t.isForked(),r.hasNodes()){a=!0;let e=t.getRedirectModifier();if(null==e)null==c&&(c=[]),c.push(r.copyFor(t.getSource()));else try{let n=e.apply(t);if(0!==n.length){null==c&&(c=[]);for(let e of n)c.push(r.copyFor(e))}}catch(e){if(this.consumer.onCommandComplete(t,!1,0),!s)throw e}}}else if(null!=t.getCommand()){a=!0;try{let e=t.getCommand()(t);n+=e,this.consumer.onCommandComplete(t,!0,e),i++}catch(e){if(this.consumer.onCommandComplete(t,!1,0),!s)throw e}}}d=c,c=null}if(!a)throw this.consumer.onCommandComplete(l,!1,0),o.default.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand().createWithContext(r.getReader());return s?i:n}parse(e,t){"string"==typeof e&&(e=new h.default(e));let r=new a.default(this,t,this.root,e.getCursor());return this.parseNodes(this.root,e,r)}parseNodes(e,t,r){let n=r.getSource(),i=null,u=null,l=t.getCursor();for(let d of e.getRelevantNodes(t)){if(!d.canUse(n))continue;let e=r.copy(),g=new h.default(t);try{if(d.parse(g,e),g.canRead()&&g.peek()!=c)throw o.default.BUILT_IN_EXCEPTIONS.dispatcherExpectedArgumentSeparator().createWithContext(g)}catch(e){null==i&&(i=new Map),i.set(d,e),g.setCursor(l);continue}if(e.withCommand(d.getCommand()),g.canRead(null==d.getRedirect()?2:1)){if(g.skip(),null!=d.getRedirect()){let t=new a.default(this,n,d.getRedirect(),g.getCursor()),r=this.parseNodes(d.getRedirect(),g,t);return e.withChild(r.getContext()),new s.default(e,r.getReader(),r.getExceptions())}{let t=this.parseNodes(d,g,e);null==u&&(u=[]),u.push(t)}}else null==u&&(u=[]),u.push(new s.default(e,g,new Map))}return null!=u?(u.length>1&&u.sort(((e,t)=>!e.getReader().canRead()&&t.getReader().canRead()?-1:e.getReader().canRead()&&!t.getReader().canRead()?1:0===e.getExceptions().size&&0!==t.getExceptions().size?-1:0!==e.getExceptions().size&&0===t.getExceptions().size?1:0)),u[0]):new s.default(r,t,null==i?new Map:i)}getAllUsage(e,t,r){const n=[];return this.__getAllUsage(e,t,n,"",r),n}__getAllUsage(e,t,r,n="",i){if(!i||e.canUse(t))if(null!=e.getCommand()&&r.push(n),null!=e.getRedirect()){const t=e.getRedirect()===this.root?"...":"-> "+e.getRedirect().getUsageText();r.push(0===n.length?e.getUsageText()+c+t:n+c+t)}else if(e.getChildrenCount()>0)for(let s of e.getChildren())this.__getAllUsage(s,t,r,0===n.length?s.getUsageText():n+c+s.getUsageText(),i)}getSmartUsage(e,t){let r=new Map,n=null!==e.getCommand();for(let i of e.getChildren()){let e=this.__getSmartUsage(i,t,n,!1);null!=e&&r.set(i,e)}return r}__getSmartUsage(e,t,r,n){if(!e.canUse(t))return null;let i=r?"["+e.getUsageText()+"]":e.getUsageText(),s=null!=e.getCommand(),a=s?"[":"(",o=s?"]":")";if(!n){if(null!=e.getRedirect()){let t=e.getRedirect()==this.root?"...":"-> "+e.getRedirect().getUsageText();return i+c+t}{let r=[...e.getChildren()].filter((e=>e.canUse(t)));if(1==r.length){let e=this.__getSmartUsage(r[0],t,s,s);if(null!=e)return i+c+e}else if(r.length>1){let e=new Set;for(let n of r){let r=this.__getSmartUsage(n,t,s,!0);null!=r&&e.add(r)}if(1===e.size){let t=e.values().next().value;return i+c+(s?"["+t+"]":t)}if(e.size>1){let e=a,t=0;for(let n of r)t>0&&(e+="|"),e+=n.getUsageText(),t++;if(t>0)return e+=o,i+c+e}}}}return i}getCompletionSuggestions(e,t=e.getReader().getTotalLength()){return n(this,void 0,void 0,(function*(){let r=e.getContext(),n=r.findSuggestionContext(t),i=n.parent,s=Math.min(n.startPos,t),a=e.getReader().getString(),o=a.substring(0,t),d=[];for(let e of i.getChildren()){let t=yield u.default.empty();try{t=yield e.listSuggestions(r.build(o),new l.default(o,s))}catch(e){}d.push(t)}return Promise.resolve(u.default.merge(a,d))}))}getRoot(){return this.root}getPath(e){let t=[];this.addPaths(this.root,t,[]);for(let r of t)if(r[r.length-1]===e){let e=[];for(let t of r)t!==this.root&&e.push(t.getName());return e}return[]}findNode(e){let t=this.root;for(let r of e)if(t=t.getChild(r),null==t)return null;return t}findAmbiguities(e){this.root.findAmbiguities(e)}addPaths(e,t,r){let n=[];n.push(...r),n.push(e),t.push(n);for(let r of e.getChildren())this.addPaths(r,t,n)}}},405:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.str=e}getString(){return this.str}toString(){return this.str}}},626:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(285));t.default=class{constructor(e,t,r){this.context=e,this.reader=t||new i.default(""),this.exceptions=r||new Map}getContext(){return this.context}getReader(){return this.reader}getExceptions(){return this.exceptions}}},285:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(814)),s='"';class a{constructor(e){this.cursor=0,"string"==typeof e?this.string=e:(this.string=e.string,this.cursor=e.cursor)}getString(){return this.string}setCursor(e){this.cursor=e}getRemainingLength(){return this.string.length-this.cursor}getTotalLength(){return this.string.length}getCursor(){return this.cursor}getRead(){return this.string.substring(0,this.cursor)}getRemaining(){return this.string.substring(this.cursor)}canRead(e=1){return this.cursor+e<=this.string.length}peek(e=0){return this.string.charAt(this.cursor+e)}read(){return this.string.charAt(this.cursor++)}skip(){this.cursor++}static isAllowedNumber(e){return e>="0"&&e<="9"||"."==e||"-"==e||"+"==e||"e"==e||"E"==e}skipWhitespace(){for(;this.canRead()&&/\s/.test(this.peek());)this.skip()}readInt(){let e=this.cursor;for(;this.canRead()&&a.isAllowedNumber(this.peek());)this.skip();let t=this.string.substring(e,this.cursor);if(0===t.length)throw i.default.BUILT_IN_EXCEPTIONS.readerExpectedInt().createWithContext(this);const r=parseInt(t);if(isNaN(r)||r!==parseFloat(t))throw this.cursor=e,i.default.BUILT_IN_EXCEPTIONS.readerInvalidInt().createWithContext(this,t);return r}readFloat(){let e=this.cursor;for(;this.canRead()&&a.isAllowedNumber(this.peek());)this.skip();let t=this.string.substring(e,this.cursor);if(0===t.length)throw i.default.BUILT_IN_EXCEPTIONS.readerExpectedFloat().createWithContext(this);const r=parseFloat(t),n=parseFloat(t.substring(r.toString().length,this.cursor));if(isNaN(r)||!isNaN(n)&&0!==n)throw this.cursor=e,i.default.BUILT_IN_EXCEPTIONS.readerInvalidFloat().createWithContext(this,t);return r}static isAllowedInUnquotedString(e){return e>="0"&&e<="9"||e>="A"&&e<="Z"||e>="a"&&e<="z"||"_"==e||"-"==e||"."==e||"+"==e}readUnquotedString(){let e=this.cursor;for(;this.canRead()&&a.isAllowedInUnquotedString(this.peek());)this.skip();return this.string.substring(e,this.cursor)}readQuotedString(){if(!this.canRead())return"";if(this.peek()!=s)throw i.default.BUILT_IN_EXCEPTIONS.readerExpectedStartOfQuote().createWithContext(this);this.skip();let e="",t=!1;for(;this.canRead();){let r=this.read();if(t){if(r!=s&&"\\"!=r)throw this.setCursor(this.getCursor()-1),i.default.BUILT_IN_EXCEPTIONS.readerInvalidEscape().createWithContext(this,r);e+=r,t=!1}else if("\\"==r)t=!0;else{if(r==s)return e;e+=r}}throw i.default.BUILT_IN_EXCEPTIONS.readerExpectedEndOfQuote().createWithContext(this)}readString(){return this.canRead()&&this.peek()===s?this.readQuotedString():this.readUnquotedString()}readBoolean(){let e=this.cursor,t=this.readString();if(0===t.length)throw i.default.BUILT_IN_EXCEPTIONS.readerExpectedBool().createWithContext(this);if("true"===t)return!0;if("false"===t)return!1;throw this.cursor=e,i.default.BUILT_IN_EXCEPTIONS.readerInvalidBool().createWithContext(this,t)}expect(e){if(!this.canRead()||this.peek()!==e)throw i.default.BUILT_IN_EXCEPTIONS.readerExpectedSymbol().createWithContext(this,e);this.skip()}}t.default=a},609:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(763)),s=n(r(425)),a=n(r(952)),o=n(r(749));t.DefaultType={bool:i.default.bool,integer:s.default.integer,float:a.default.float,word:o.default.word,string:o.default.string,greedyString:o.default.greedyString}},763:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=["true","false"];class n{constructor(){}static bool(){return new n}static getBool(e,t){return e.getArgument(t,Boolean)}parse(e){return e.readBoolean()}listSuggestions(e,t){return"true".startsWith(t.getRemaining().toLowerCase())&&t.suggest("true"),"false".startsWith(t.getRemaining().toLowerCase())&&t.suggest("false"),t.buildPromise()}getExamples(){return r}}t.default=n},952:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(814)),s=["0","1.2",".5","-1","-.5","-1234.56"];class a{constructor(e,t){this.minimum=e,this.maximum=t}static float(e=-1/0,t=1/0){return new a(e,t)}static getFloat(e,t){return e.getArgument(t,Number)}getMinimum(){return this.minimum}getMaximum(){return this.maximum}parse(e){let t=e.getCursor(),r=e.readFloat();if(r<this.minimum)throw e.setCursor(t),i.default.BUILT_IN_EXCEPTIONS.integerTooLow().createWithContext(e,r,this.minimum);if(r>this.maximum)throw e.setCursor(t),i.default.BUILT_IN_EXCEPTIONS.integerTooHigh().createWithContext(e,r,this.maximum);return r}equals(e){return this===e||e instanceof a&&this.maximum==e.maximum&&this.minimum==e.minimum}toString(){return this.minimum===-1/0&&this.maximum===1/0?"float()":this.maximum==1/0?"float("+this.minimum+")":"float("+this.minimum+", "+this.maximum+")"}getExamples(){return s}}t.default=a},425:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(814)),s=["0","123","-123"];class a{constructor(e,t){this.minimum=e,this.maximum=t}static integer(e=-1/0,t=1/0){return new a(e,t)}static getInteger(e,t){return e.getArgument(t,Number)}getMinimum(){return this.minimum}getMaximum(){return this.maximum}parse(e){let t=e.getCursor(),r=e.readInt();if(r<this.minimum)throw e.setCursor(t),i.default.BUILT_IN_EXCEPTIONS.integerTooLow().createWithContext(e,r,this.minimum);if(r>this.maximum)throw e.setCursor(t),i.default.BUILT_IN_EXCEPTIONS.integerTooHigh().createWithContext(e,r,this.maximum);return r}equals(e){return this===e||e instanceof a&&this.maximum==e.maximum&&this.minimum==e.minimum}toString(){return this.minimum===-1/0&&this.maximum===1/0?"integer()":this.maximum==1/0?"integer("+this.minimum+")":"integer("+this.minimum+", "+this.maximum+")"}getExamples(){return s}}t.default=a},749:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(285));var s;!function(e){e.SINGLE_WORD="words_with_underscores",e.QUOTABLE_PHRASE='"quoted phrase"',e.GREEDY_PHRASE="words with spaces"}(s=t.StringType||(t.StringType={}));class a{constructor(e){this.type=e}static word(){return new a(s.SINGLE_WORD)}static string(){return new a(s.QUOTABLE_PHRASE)}static greedyString(){return new a(s.GREEDY_PHRASE)}static getString(e,t){return e.getArgument(t,String)}getType(){return this.type}parse(e){if(this.type==s.GREEDY_PHRASE){let t=e.getRemaining();return e.setCursor(e.getTotalLength()),t}return this.type==s.SINGLE_WORD?e.readUnquotedString():e.readString()}toString(){return"string()"}static escapeIfRequired(e){for(let t of e)if(!i.default.isAllowedInUnquotedString(t))return a.escape(e);return e}static escape(e){let t='"';for(let r=0;r<e.length;r++){const n=e.charAt(r);"\\"!=n&&'"'!=n||(t+="\\"),t+=n}return t+='"',t}}t.default=a},528:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(758)),s=n(r(193));t.default=class{constructor(){this.args=new s.default,this.modifier=null}then(e){if(null!=this.target)throw new Error("Cannot add children to a redirected node");return e instanceof i.default?this.args.addChild(e):this.args.addChild(e.build()),this.getThis()}getArguments(){return this.args.getChildren()}executes(e){return this.command=e,this.getThis()}getCommand(){return this.command}requires(e){return this.requirement=e,this.getThis()}getRequirement(){return this.requirement}redirect(e,t){return this.forward(e,null==t?null:e=>[t.apply(e)],!1)}fork(e,t){return this.forward(e,t,!0)}forward(e,t,r){if(this.args.getChildrenCount()>0)throw new Error("Cannot forward a node with children");return this.target=e,this.modifier=t,this.forks=r,this.getThis()}getRedirect(){return this.target}getRedirectModifier(){return this.modifier}isFork(){return this.forks}}},346:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(871)),s=n(r(528));class a extends s.default{constructor(e){super(),this.literal=e}static literal(e){return new a(e)}getThis(){return this}getLiteral(){return this.literal}build(){let e=new i.default(this.getLiteral(),this.getCommand(),this.getRequirement(),this.getRedirect(),this.getRedirectModifier(),this.isFork());for(let t of this.getArguments())e.addChild(t);return e}}t.default=a,t.literal=a.literal},477:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(442)),s=n(r(528));class a extends s.default{constructor(e,t){super(),this.name=e,this.type=t}static argument(e,t){return new a(e,t)}suggests(e){return this.suggestionsProvider=e,this.getThis()}getSuggestionsProvider(){return this.suggestionsProvider}getThis(){return this}getType(){return this.type}getName(){return this.name}build(){let e=new i.default(this.getName(),this.getType(),this.getCommand(),this.getRequirement(),this.getRedirect(),this.getRedirectModifier(),this.isFork(),this.getSuggestionsProvider());for(let t of this.getArguments())e.addChild(t);return e}}t.default=a,t.argument=a.argument},810:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(774));class s{constructor(e,t,r,n,i,s,a,o,u,l){this.source=e,this.input=t,this.args=r,this.command=n,this.rootNode=i,this.nodes=s,this.range=a,this.child=o,this.modifier=u,this.forks=l}copyFor(e){return this.source===e?this:new s(e,this.input,this.args,this.command,this.rootNode,this.nodes,this.range,this.child,this.modifier,this.forks)}getChild(){return this.child}getLastChild(){let e=this;for(;null!=e.getChild();)e=e.getChild();return e}getCommand(){return this.command}getSource(){return this.source}getArgument(e,t){const r=this.args.get(e);if(null==r)throw new Error("No such argument '"+e+"' exists on this command");let n=r.getResult();return null==t?n:t(n)}equals(e){return this===e||e instanceof s&&!!i.default(this.args,e.args)&&!!this.rootNode.equals(e.rootNode)&&!(this.nodes.length!=e.nodes.length||!i.default(this.nodes,e.nodes))&&!!(null!=this.command?i.default(this.command,e.command):null==e.command)&&!!i.default(this.source,e.source)&&!!(null!=this.child?this.child.equals(e.child):null==e.child)}getRedirectModifier(){return this.modifier}getRange(){return this.range}getInput(){return this.input}getRootNode(){return this.rootNode}getNodes(){return this.nodes}hasNodes(){return this.nodes.length>=0}isForked(){return this.forks}}t.default=s},228:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(793)),s=n(r(810)),a=n(r(1)),o=n(r(341));class u{constructor(e,t,r,n){this.args=new Map,this.nodes=[],this.modifier=null,this.rootNode=r,this.dispatcher=e,this.source=t,this.range=i.default.at(n)}withSource(e){return this.source=e,this}getSource(){return this.source}getRootNode(){return this.rootNode}withArgument(e,t){return this.args.set(e,t),this}getArguments(){return this.args}withCommand(e){return this.command=e,this}withNode(e,t){return this.nodes.push(new o.default(e,t)),this.range=i.default.encompassing(this.range,t),this.modifier=e.getRedirectModifier(),this.forks=e.isFork(),this}copy(){const e=new u(this.dispatcher,this.source,this.rootNode,this.range.getStart());return e.command=this.command,e.args=new Map([...e.args,...this.args]),e.nodes.push(...this.nodes),e.child=this.child,e.range=this.range,e.forks=this.forks,e}withChild(e){return this.child=e,this}getChild(){return this.child}getLastChild(){let e=this;for(;null!=e.getChild();)e=e.getChild();return e}getCommand(){return this.command}getNodes(){return this.nodes}build(e){return new s.default(this.source,e,this.args,this.command,this.rootNode,this.nodes,this.range,null==this.child?null:this.child.build(e),this.modifier,this.forks)}getDispatcher(){return this.dispatcher}getRange(){return this.range}findSuggestionContext(e){if(this.range.getStart()<=e){if(this.range.getEnd()<e){if(null!=this.child)return this.child.findSuggestionContext(e);if(this.nodes.length>0){let e=this.nodes[this.nodes.length-1];return new a.default(e.getNode(),e.getRange().getEnd()+1)}return new a.default(this.rootNode,this.range.getStart())}{let t=this.rootNode;for(let r of this.nodes){let n=r.getRange();if(n.getStart()<=e&&e<=n.getEnd())return new a.default(t,n.getStart());t=r.getNode()}if(null==t)throw new Error("Can't find node before cursor");return new a.default(t,this.range.getStart())}}throw new Error("Can't find node before cursor")}}t.default=u},187:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(793));class s{constructor(e,t,r){this.range=i.default.between(e,t),this.result=r}getRange(){return this.range}getResult(){return this.result}equals(e){return this===e||e instanceof s&&this.range.equals(e.range)&&this.result===e.result}}t.default=s},341:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(e,t){this.node=e,this.range=t}getNode(){return this.node}getRange(){return this.range}toString(){return this.node+"@"+this.range}equals(e){return this===e||null!=e&&e instanceof r&&this.node.equals(e.node)&&this.range.equals(e.range)}}t.default=r},793:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(e,t){this.start=e,this.end=t}static at(e){return new r(e,e)}static between(e,t){return new r(e,t)}static encompassing(e,t){return new r(Math.min(e.getStart(),t.getStart()),Math.max(e.getEnd(),t.getEnd()))}getStart(){return this.start}getEnd(){return this.end}get(e){return"string"==typeof e?e.substring(this.start,this.end):e.getString().substring(this.start,this.end)}isEmpty(){return this.start===this.end}getLength(){return this.end-this.start}equals(e){return this===e||e instanceof r&&this.start===e.start&&this.end==e.end}toString(){return"StringRange{start="+this.start+", end="+this.end+"}"}}t.default=r},1:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t){this.parent=e,this.startPos=t}}},288:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(405)),s=n(r(517)),a=n(r(37));class o{floatTooLow(){return o.FLOAT_TOO_SMALL}floatTooHigh(){return o.FLOAT_TOO_BIG}integerTooLow(){return o.INTEGER_TOO_SMALL}integerTooHigh(){return o.INTEGER_TOO_BIG}literalIncorrect(){return o.LITERAL_INCORRECT}readerExpectedStartOfQuote(){return o.READER_EXPECTED_START_OF_QUOTE}readerExpectedEndOfQuote(){return o.READER_EXPECTED_END_OF_QUOTE}readerInvalidEscape(){return o.READER_INVALID_ESCAPE}readerInvalidBool(){return o.READER_INVALID_BOOL}readerInvalidInt(){return o.READER_INVALID_INT}readerExpectedInt(){return o.READER_EXPECTED_INT}readerInvalidFloat(){return o.READER_INVALID_FLOAT}readerExpectedFloat(){return o.READER_EXPECTED_FLOAT}readerExpectedBool(){return o.READER_EXPECTED_BOOL}readerExpectedSymbol(){return o.READER_EXPECTED_SYMBOL}dispatcherUnknownCommand(){return o.DISPATCHER_UNKNOWN_COMMAND}dispatcherUnknownArgument(){return o.DISPATCHER_UNKNOWN_ARGUMENT}dispatcherExpectedArgumentSeparator(){return o.DISPATCHER_EXPECTED_ARGUMENT_SEPARATOR}dispatcherParseException(){return o.DISPATCHER_PARSE_EXCEPTION}}o.FLOAT_TOO_SMALL=new a.default(((e,t)=>new i.default("Float must not be less than "+t+", found "+e))),o.FLOAT_TOO_BIG=new a.default(((e,t)=>new i.default("Float must not be more than "+t+", found "+e))),o.INTEGER_TOO_SMALL=new a.default(((e,t)=>new i.default("Integer must not be less than "+t+", found "+e))),o.INTEGER_TOO_BIG=new a.default(((e,t)=>new i.default("Integer must not be more than "+t+", found "+e))),o.LITERAL_INCORRECT=new a.default((e=>new i.default("Expected literal "+e))),o.READER_EXPECTED_START_OF_QUOTE=new s.default(new i.default("Expected quote to start a string")),o.READER_EXPECTED_END_OF_QUOTE=new s.default(new i.default("Unclosed quoted string")),o.READER_INVALID_ESCAPE=new a.default((e=>new i.default("Invalid escape sequence '"+e+"' in quoted string"))),o.READER_INVALID_BOOL=new a.default((e=>new i.default("Invalid bool, expected true or false but found '"+e+"'"))),o.READER_INVALID_INT=new a.default((e=>new i.default("Invalid integer '"+e+"'"))),o.READER_EXPECTED_INT=new s.default(new i.default("Expected integer")),o.READER_INVALID_FLOAT=new a.default((e=>new i.default("Invalid float '"+e+"'"))),o.READER_EXPECTED_FLOAT=new s.default(new i.default("Expected float")),o.READER_EXPECTED_BOOL=new s.default(new i.default("Expected bool")),o.READER_EXPECTED_SYMBOL=new a.default((e=>new i.default("Expected '"+e+"'"))),o.DISPATCHER_UNKNOWN_COMMAND=new s.default(new i.default("Unknown command")),o.DISPATCHER_UNKNOWN_ARGUMENT=new s.default(new i.default("Incorrect argument for command")),o.DISPATCHER_EXPECTED_ARGUMENT_SEPARATOR=new s.default(new i.default("Expected whitespace to end one argument, but found trailing data")),o.DISPATCHER_PARSE_EXCEPTION=new a.default((e=>new i.default("Could not parse command: "+e))),t.default=o},814:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(288));class s extends Error{constructor(e,t,r=null,n=-1){super(t.getString()),Error.captureStackTrace(this,s),this.type=e,this.__message=t,this.input=r,this.cursor=n,this.message=this.getMessage()}getMessage(){let e=this.__message.getString(),t=this.getContext();return null!=t&&(e+=" at position "+this.cursor+": "+t),e}getRawMessage(){return this.__message}getContext(){if(null==this.input||this.cursor<0)return null;let e="",t=Math.min(this.input.length,this.cursor);return t>s.CONTEXT_AMOUNT&&(e+="..."),e+=this.input.substring(Math.max(0,t-s.CONTEXT_AMOUNT),t),e+="<--[HERE]",e}getType(){return this.type}getInput(){return this.input}getCursor(){return this.cursor}toString(){return this.message}}s.CONTEXT_AMOUNT=10,s.BUILT_IN_EXCEPTIONS=new i.default,t.default=s},37:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(814));class s{constructor(e){this.fn=e,Error.captureStackTrace(this,s)}create(...e){return new i.default(this,this.fn(...e))}createWithContext(e,...t){return new i.default(this,this.fn(...t),e.getString(),e.getCursor())}}t.default=s},517:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(814));class s{constructor(e){this.message=e,Error.captureStackTrace(this,s)}create(){return new i.default(this,this.message)}createWithContext(e){return new i.default(this,this.message,e.getString(),e.getCursor())}toString(){return this.message.getString()}}t.default=s},581:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(824));class s extends i.default{constructor(e,t,r=null){super(e,t.toString(),r),this.value=t}getValue(){return this.value}equals(e){return this===e||e instanceof s&&this.value==e.value&&super.equals(e)}toString(){return"IntegerSuggestion{value="+this.value+", range="+this.getRange()+", text='"+this.getText()+"', tooltip='"+this.getTooltip()+"'}"}compareTo(e){return e instanceof s?this.value<e.value?1:-1:super.compareTo(e)}compareToIgnoreCase(e){return this.compareTo(e)}}t.default=s},824:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(774));class s{constructor(e,t,r=null){this.range=e,this.text=t,this.tooltip=r}getRange(){return this.range}getText(){return this.text}getTooltip(){return this.tooltip}apply(e){if(0===this.range.getStart()&&this.range.getEnd()==e.length)return this.text;let t="";return this.range.getStart()>0&&(t+=e.substring(0,this.range.getStart())),t+=this.text,this.range.getEnd()<e.length&&(t+=e.substring(this.range.getEnd())),t}equals(e){return this===e||e instanceof s&&i.default(this.range,e.range)&&this.text===e.text&&i.default(this.tooltip,e.tooltip)}toString(){return"Suggestion{range="+this.range+", text='"+this.text+"', tooltip='"+this.tooltip+"'}"}compareTo(e){return this.text<e.text?1:-1}compareToIgnoreCase(e){return this.text.toLowerCase()<e.text.toLowerCase()?1:-1}expand(e,t){if(t.equals(this.range))return this;let r="";return t.getStart()<this.range.getStart()&&(r+=e.substring(t.getStart(),this.range.getStart())),r+=this.text,t.getEnd()>this.range.getEnd()&&(r+=e.substring(this.range.getEnd(),t.getEnd())),new s(t,r,this.tooltip)}}t.default=s},398:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(774)),s=n(r(793));class a{constructor(e,t){this.range=e,this.suggestions=t}getRange(){return this.range}getList(){return this.suggestions}isEmpty(){return 0===this.suggestions.length}equals(e){return this===e||e instanceof a&&this.range.equals(e.range)&&i.default(this.suggestions,e.suggestions)}toString(){return"Suggestions{range="+this.range+", suggestions="+this.suggestions+"}"}static empty(){return Promise.resolve(this.EMPTY)}static merge(e,t){if(0===t.length)return this.EMPTY;if(1===t.length)return t[0];const r=[];for(let e of t)r.push(...e.getList());return a.create(e,r)}static create(e,t){if(0===t.length)return this.EMPTY;let r=1/0,n=-1/0;for(let e of t)r=Math.min(e.getRange().getStart(),r),n=Math.max(e.getRange().getEnd(),n);let i=new s.default(r,n);const o=[];for(let r of t)o.push(r.expand(e,i));const u=o.sort(((e,t)=>e.compareToIgnoreCase(t)));return new a(i,u)}}a.EMPTY=new a(s.default.at(0),[]),t.default=a},197:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(793)),s=n(r(824)),a=n(r(398)),o=n(r(581));class u{constructor(e,t){this.result=[],this.input=e,this.start=t,this.remaining=e.substring(t)}getInput(){return this.input}getStart(){return this.start}getRemaining(){return this.remaining}build(){return a.default.create(this.input,this.result)}buildPromise(){return Promise.resolve(this.build())}suggest(e,t=null){return"number"==typeof e?(this.result.push(new o.default(i.default.between(this.start,this.input.length),e,t)),this):(e===this.remaining||this.result.push(new s.default(i.default.between(this.start,this.input.length),e,t)),this)}add(e){return this.result.push(...e.result),this}createOffset(e){return new u(this.input,this.start)}restart(){return new u(this.input,this.start)}}t.default=u},442:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(774)),s=n(r(285)),a=n(r(477)),o=n(r(187)),u=n(r(398)),l=n(r(758));class d extends l.default{constructor(e,t,r,n,i,s,a,o){super(r,n,i,s,a),this.name=e,this.type=t,this.customSuggestions=o}getNodeType(){return"argument"}getType(){return this.type}getName(){return this.name}getUsageText(){return"<"+this.name+">"}getCustomSuggestions(){return this.customSuggestions}parse(e,t){let r=e.getCursor(),n=this.type.parse(e),i=new o.default(r,e.getCursor(),n);t.withArgument(this.name,i),t.withNode(this,i.getRange())}listSuggestions(e,t){return null==this.customSuggestions?"function"==typeof this.type.listSuggestions?this.type.listSuggestions(e,t):u.default.empty():this.customSuggestions.getSuggestions(e,t)}createBuilder(){let e=a.default.argument(this.name,this.type);return e.requires(this.getRequirement()),e.forward(this.getRedirect(),this.getRedirectModifier(),this.isFork()),e.suggests(this.customSuggestions),null!=this.getCommand()&&e.executes(this.getCommand()),e}isValidInput(e){try{let t=new s.default(e);return this.type.parse(t),!t.canRead()||" "==t.peek()}catch(e){}return!1}equals(e){return this===e||e instanceof d&&this.name===e.name&&!!i.default(this.type,e.type)&&super.equals(e)}getSortedKey(){return this.name}getExamples(){return"function"==typeof this.type.getExamples?this.type.getExamples():[]}toString(){return"<argument "+this.name+":"+this.type+">"}}t.default=d},758:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(774));class s{constructor(e,t,r,n,i){this.children=new Map,this.literals=new Map,this.args=new Map,this.command=e,this.requirement=t||(()=>!0),this.redirect=r,this.modifier=n,this.forks=i}getCommand(){return this.command}getChildren(){return this.children.values()}getChildrenCount(){return this.children.size}getChild(e){return this.children.get(e)}getRedirect(){return this.redirect}getRedirectModifier(){return this.modifier}canUse(e){return this.requirement(e)}addChild(e){if("root"===e.getNodeType())throw new Error("Cannot add a RootCommandNode as a child to any other CommandNode");let t=this.children.get(e.getName());if(null!=t){null!=e.getCommand()&&(t.command=e.getCommand());for(let r of e.getChildren())t.addChild(r)}else this.children.set(e.getName(),e),"literal"===e.getNodeType()?this.literals.set(e.getName(),e):"argument"===e.getNodeType()&&this.args.set(e.getName(),e);this.children=new Map([...this.children.entries()].sort(((e,t)=>e[1].compareTo(t[1]))))}findAmbiguities(e){let t=[];for(let r of this.children.values()){for(let n of this.children.values())if(r!==n){for(let e of r.getExamples())n.isValidInput(e)&&t.push(e);t.length>0&&(e.ambiguous(this,r,n,t),t=[])}r.findAmbiguities(e)}}equals(e){return this===e||e instanceof s&&this.children.size===e.children.size&&!!i.default(this.children,e.children)&&!!(null!=this.command?i.default(this.command,e.command):null==e.command)}getRequirement(){return this.requirement}getRelevantNodes(e){if(this.literals.size>0){let t=e.getCursor();for(;e.canRead()&&" "!=e.peek();)e.skip();let r=e.getString().substring(t,e.getCursor());e.setCursor(t);let n=this.literals.get(r);return null!=n?[n]:this.args.values()}return this.args.values()}compareTo(e){return this.getNodeType()===e.getNodeType()?this.getSortedKey()>e.getSortedKey()?1:-1:"literal"===e.getNodeType()?1:-1}isFork(){return this.forks}}t.default=s},871:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(758)),s=n(r(285)),a=n(r(346)),o=n(r(793)),u=n(r(814)),l=n(r(398));class d extends i.default{constructor(e,t,r,n,i,s){super(t,r,n,i,s),this.literal=e}getNodeType(){return"literal"}getLiteral(){return this.literal}getName(){return this.literal}parse(e,t){let r=e.getCursor(),n=this.__parse(e);if(!(n>-1))throw u.default.BUILT_IN_EXCEPTIONS.literalIncorrect().createWithContext(e,this.literal);t.withNode(this,o.default.between(r,n))}__parse(e){let t=e.getCursor();if(e.canRead(this.literal.length)){let r=t+this.literal.length;if(e.getString().substring(t,r)===this.literal){if(e.setCursor(r),!e.canRead()||" "==e.peek())return r;e.setCursor(t)}}return-1}listSuggestions(e,t){return this.literal.toLowerCase().startsWith(t.getRemaining().toLowerCase())?t.suggest(this.literal).buildPromise():l.default.empty()}isValidInput(e){return this.__parse(new s.default(e))>-1}equals(e){return this===e||e instanceof d&&this.literal===e.literal&&super.equals(e)}getUsageText(){return this.literal}createBuilder(){let e=a.default.literal(this.literal);return e.requires(this.getRequirement()),e.forward(this.getRedirect(),this.getRedirectModifier(),this.isFork()),null!=this.getCommand()&&e.executes(this.getCommand()),e}getSortedKey(){return this.literal}getExamples(){return[this.literal]}toString(){return"<literal "+this.literal+">"}}t.default=d},193:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(758)),s=n(r(398));class a extends i.default{constructor(){super(null,(e=>!0),null,(e=>e.getSource()),!1)}getNodeType(){return"root"}getName(){return""}getUsageText(){return""}parse(e,t){}listSuggestions(e,t){return s.default.empty()}isValidInput(e){return!1}equals(e){return this===e||e instanceof a&&super.equals(e)}createBuilder(){throw new Error("Cannot convert root into a builder")}getSortedKey(){return""}getExamples(){return[]}toString(){return"<root>"}}t.default=a},774:(e,t)=>{function r(e,t){return e===t||typeof e==typeof t&&e instanceof Object&&("function"==typeof e?e.toString()===t.toString():e.constructor===t.constructor&&(e instanceof Map?function(e,t){if(e.size!=t.size)return!1;for(let[n,i]of e){const e=t.get(n);if(!r(e,i))return!1;if(void 0===e&&!t.has(n))return!1}return!0}(e,t):e instanceof Set?n([...e],[...t]):e instanceof Array?n(e,t):"object"==typeof e&&function(e,t){const n=Object.keys(e),i=Object.keys(t);return n.length==i.length&&!!n.every((e=>t.hasOwnProperty(e)))&&n.every((n=>r(e[n],t[n])))}(e,t)))}function n(e,t){if(e.length!=t.length)return!1;for(let n=0;n<e.length;n++)if(!r(e[n],t[n]))return!1;return!0}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}(()=>{var e=r(298);class t{static readLocationLiteral(t){let r=t.getCursor();for(;t.canRead()&&(e.StringReader.isAllowedNumber(t.peek())||"~"===(n=t.peek())||"^"===n);)t.skip();var n;let i=t.getString().substring(r,t.getCursor());if(0===i.length)throw e.CommandSyntaxException.BUILT_IN_EXCEPTIONS.readerExpectedInt().createWithContext(t);if(i.startsWith("~")||i.startsWith("^")){if(1===i.length)return 0;i=i.slice(1)}const s=parseInt(i);if(isNaN(s)||s!==parseFloat(i))throw t.setCursor(r),e.CommandSyntaxException.BUILT_IN_EXCEPTIONS.readerInvalidInt().createWithContext(t,i);return s}static readResourceLocation(t){function r(e){return"_"===e||"-"===e||e>="a"&&e<="z"||e>="0"&&e<="9"||"/"===e||"."===e}function n(e,t){for(let r=0;r<e.length;r++)if(!t(e.charAt(r)))return!1;return!0}const i=t.getCursor();for(;t.canRead()&&((s=t.peek())>="0"&&s<="9"||s>="a"&&s<="z"||"_"===s||":"===s||"/"===s||"."===s||"-"===s);)t.skip();var s;let a=t.getString().substring(i,t.getCursor());const o=a.split(":");switch(o.length){case 0:throw new e.SimpleCommandExceptionType(new e.LiteralMessage(a+" is not a valid Resource")).createWithContext(t);case 1:if(!n(o[0],r))throw new e.SimpleCommandExceptionType(new e.LiteralMessage("Non [a-z0-9/._-] character in path of location: "+a)).createWithContext(t);a=`minecraft:${a}`;break;case 2:if(!n(o[0],(function(e){return"_"===e||"-"===e||e>="a"&&e<="z"||e>="0"&&e<="9"||"."===e})))throw new e.SimpleCommandExceptionType(new e.LiteralMessage("Non [a-z0-9_.-] character in namespace of location: "+a)).createWithContext(t);if(!n(o[1],r))throw new e.SimpleCommandExceptionType(new e.LiteralMessage("Non [a-z0-9/._-] character in path of location: "+a)).createWithContext(t)}return a}}class n{static suggest(e,t){let r=t.getRemaining().toLowerCase();for(let i of e)n.matchesSubStr(r,i.toLowerCase())&&t.suggest(i);return t.buildPromise()}static matchesSubStr(e,t){let r=0;for(;!t.startsWith(e,r);){if(r=t.indexOf("_",r),r<0)return!1;r++}return!0}}class i{static UNITS=new Map([["d",24e3],["s",20],["t",1],["",1]]);ticks;constructor(e=0){this.ticks=e}parse(t){const r=t.readFloat(),n=t.readUnquotedString(),s=i.UNITS.get(n);if(0===s)throw new e.SimpleCommandExceptionType(new e.LiteralMessage(`Invalid unit "${n}"`)).createWithContext(t);const a=Math.round(r*s);if(a<0)throw new e.SimpleCommandExceptionType(new e.LiteralMessage("Tick count must be non-negative")).createWithContext(t);return this.ticks=a,this}listSuggestions(t,r){let s=new e.StringReader(r.getRemaining());try{s.readFloat()}catch(e){return r.buildPromise()}return n.suggest([...i.UNITS.keys()],r.createOffset(r.getStart()+s.getCursor()))}getExamples(){return["0d","0s","0t","0"]}}class s{x;y;z;constructor(e=0,t=0,r=0){this.x=e,this.y=t,this.z=r}parse(e){return this.x=t.readLocationLiteral(e),e.skip(),this.y=t.readLocationLiteral(e),e.skip(),this.z=t.readLocationLiteral(e),this}listSuggestions(e,t){return t.suggest("~"),t.suggest("~ ~"),t.suggest("~ ~ ~"),t.buildPromise()}getExamples(){return["1 2 3"]}}class a{x;z;constructor(e=0,t=0){this.x=e,this.z=t}parse(e){return this.x=t.readLocationLiteral(e),e.skip(),this.z=t.readLocationLiteral(e),this}listSuggestions(e,t){return t.suggest("~"),t.suggest("~ ~"),t.buildPromise()}getExamples(){return["1 2"]}}class o{username;constructor(e=""){this.username=e}parse(t){const r=t.getCursor();for(;t.canRead()&&" "!==t.peek();)t.skip();const n=t.getString(),i=t.getCursor();if(this.username=n.slice(r,i),!this.username.match(/^[A-Za-z0-9_]{2,16}$/))throw new e.SimpleCommandExceptionType(new e.LiteralMessage(this.username+" is not a valid username")).createWithContext(t);return this}getExamples(){return["Skepter"]}}class u{literals;selectedLiteral;constructor(e){this.literals=e,this.selectedLiteral=""}parse(t){const r=t.getCursor();for(;t.canRead()&&" "!==t.peek();)t.skip();if(this.selectedLiteral=t.getString().slice(r,t.getCursor()),this.selectedLiteral.endsWith(" ")&&(this.selectedLiteral.trimEnd(),t.setCursor(t.getCursor()-1)),!this.literals.includes(this.selectedLiteral))throw new e.SimpleCommandExceptionType(new e.LiteralMessage(this.selectedLiteral+" is not one of "+this.literals)).createWithContext(t);return this}listSuggestions(e,t){for(let e of this.literals)t.suggest(e);return t.buildPromise()}getExamples(){return["blah"]}}class l{static ChatColor={black:"§0",dark_blue:"§1",dark_green:"§2",dark_aqua:"§3",dark_red:"§4",dark_purple:"§5",gold:"§6",gray:"§7",dark_gray:"§8",blue:"§9",green:"§a",aqua:"§b",red:"§c",light_purple:"§d",yellow:"§e",white:"§f"};chatcolor;constructor(e=null){this.chatcolor=e}parse(t){let r=t.readUnquotedString(),n=l.ChatColor[r.toLowerCase()];if(void 0===n)throw new e.SimpleCommandExceptionType(new e.LiteralMessage(`Unknown colour '${r}'`)).createWithContext(t);return this.chatcolor=n,this}listSuggestions(e,t){return n.suggest(Object.keys(l.ChatColor),t)}getExamples(){return["red","green"]}}class d{static PotionEffects=["minecraft:speed","minecraft:slowness","minecraft:haste","minecraft:mining_fatigue","minecraft:strength","minecraft:instant_health","minecraft:instant_damage","minecraft:jump_boost","minecraft:nausea","minecraft:regeneration","minecraft:resistance","minecraft:fire_resistance","minecraft:water_breathing","minecraft:invisibility","minecraft:blindness","minecraft:night_vision","minecraft:hunger","minecraft:weakness","minecraft:poison","minecraft:wither","minecraft:health_boost","minecraft:absorption","minecraft:saturation","minecraft:glowing","minecraft:levitation","minecraft:luck","minecraft:unluck","minecraft:slow_falling","minecraft:conduit_power","minecraft:dolphins_grace","minecraft:bad_omen","minecraft:hero_of_the_village","minecraft:darkness"];potionEffect;constructor(e=null){this.potionEffect=e}parse(r){const n=t.readResourceLocation(r);if(!d.PotionEffects.includes(n.toLowerCase()))throw new e.SimpleCommandExceptionType(new e.LiteralMessage(`Unknown effect '${n}'`)).createWithContext(r);return this.potionEffect=n,this}listSuggestions(e,t){return n.suggest([...d.PotionEffects],t)}getExamples(){return["spooky","effect"]}}class h{angle;relative;parse(t){if(!t.canRead())throw new e.SimpleCommandExceptionType(new e.LiteralMessage("Incomplete (expected 1 angle)")).createWithContext(t);if("~"===t.peek()?(this.relative=!0,t.skip()):this.relative=!1,this.angle=t.canRead()&&" "!==t.peek()?t.readFloat():0,isNaN(this.angle)||!isFinite(this.angle))throw new e.SimpleCommandExceptionType(new e.LiteralMessage("Invalid angle")).createWithContext(t);return this}getExamples(){return["0","~","~-5"]}}class c{uuid;parse(t){const r=t.getRemaining().match(/^([-A-Fa-f0-9]+)/);if(null!==r&&(this.uuid=r[1],null!==this.uuid.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i)))return t.setCursor(t.getCursor()+this.uuid.length),this;throw new e.SimpleCommandExceptionType(new e.LiteralMessage("Invalid UUID")).createWithContext(t)}getExamples(){return["dd12be42-52a9-4a91-a8a1-11c01849e498"]}}class g{static shouldInvertValue(e){return e.skipWhitespace(),!(!e.canRead()||"!"!==e.peek()||(e.skip(),e.skipWhitespace(),0))}static Options={name:t=>{const r=t.getCursor();if(!this.shouldInvertValue(t))throw t.setCursor(r),new e.SimpleCommandExceptionType(new e.LiteralMessage("Option 'name' isn't applicable here")).createWithContext(t)},distance:e=>{},level:e=>{},x:e=>{e.readFloat()},y:e=>{e.readFloat()},z:e=>{e.readFloat()},dx:e=>{e.readFloat()},dy:e=>{e.readFloat()},dz:e=>{e.readFloat()},x_rotation:e=>{},y_rotation:e=>{},limit:e=>{},sort:e=>{},gamemode:e=>{},team:e=>{},type:e=>{},tag:e=>{},nbt:e=>{},scores:e=>{},advancements:e=>{},predicate:e=>{}};parse(t){let r,n,i,s,a,o;return t.getCursor(),t.canRead()&&"@"===t.peek()?(t.skip(),function(){if(!t.canRead())throw new e.SimpleCommandExceptionType(new e.LiteralMessage("Missing selector type")).createWithContext(t);let r=t.getCursor(),i=t.read();switch(i){case"p":case"r":s=1,n=!1,a=!0;break;case"a":s=Number.MAX_SAFE_INTEGER,n=!1,a=!0;break;case"s":s=1,n=!0,o=!0;break;case"e":s=Number.MAX_SAFE_INTEGER,n=!0;break;default:throw t.setCursor(r),new e.SimpleCommandExceptionType(new e.LiteralMessage(`Unknown selector type '${i}'`)).createWithContext(t)}t.canRead()&&"["===t.peek()&&(t.skip(),function(){for(t.skipWhitespace();t.canRead()&&"]"!==t.peek();){t.skipWhitespace();let r=t.getCursor(),n=t.readString(),i=g.Options[n];if(null===i)throw t.setCursor(r),new e.SimpleCommandExceptionType(new e.LiteralMessage(`Unknown option '${n}'`)).createWithContext(t);if(t.skipWhitespace(),!t.canRead()||"="!==t.peek())throw t.setCursor(r),new e.SimpleCommandExceptionType(new e.LiteralMessage(`Expected value for option '${n}'`)).createWithContext(t);if(t.skip(),t.skipWhitespace(),i(t),t.skipWhitespace(),t.canRead())if(","!==t.peek()){if("]"!==t.peek())throw new e.SimpleCommandExceptionType(new e.LiteralMessage("Expected end of options")).createWithContext(t)}else t.skip()}if(!t.canRead())throw new e.SimpleCommandExceptionType(new e.LiteralMessage("Expected end of options")).createWithContext(t);t.skip()}())}()):function(){let a=t.getCursor(),o=t.readString();if(null!==o.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i))r=o,n=!0;else{if(0===o.length||o.length>16)throw t.setCursor(a),new e.SimpleCommandExceptionType(new e.LiteralMessage("Invalid name or UUID")).createWithContext(t);i=o,n=!1}s=1}(),n&&a&&t.setCursor(0),this}getExamples(){return["dd12be42-52a9-4a91-a8a1-11c01849e498"]}}class f extends e.CommandDispatcher{root;constructor(e){super(e),this.root=e}deleteAll(){this.root=new e.RootCommandNode(void 0,void 0,void 0,void 0,void 0)}getRoot(){return this.root}}const m=void 0,p=document.getElementById("cmd-input"),_=document.getElementById("cmd-input-autocomplete"),E=document.getElementById("error-box"),w=document.getElementById("suggestions-box"),C=document.getElementById("valid-box"),x=document.getElementById("commands"),T=new f;var S;!function(e){e.BLACK="§0",e.DARK_BLUE="§1",e.DARK_GREEN="§2",e.DARK_AQUA="§3",e.DARK_RED="§4",e.DARK_PURPLE="§5",e.GOLD="§6",e.GRAY="§7",e.DARK_GRAY="§8",e.BLUE="§9",e.GREEN="§a",e.AQUA="§b",e.RED="§c",e.LIGHT_PURPLE="§d",e.YELLOW="§e",e.WHITE="§f"}(S||(S={}));const R=new Map([["0","black"],["1","dark_blue"],["2","dark_green"],["3","dark_aqua"],["4","dark_red"],["5","dark_purple"],["6","gold"],["7","gray"],["8","dark_gray"],["9","blue"],["a","green"],["b","aqua"],["c","red"],["d","light_purple"],["e","yellow"],["f","white"]]),y=new Map;for(let[e,t]of R)y.set(t,e);const N={0:S.AQUA,1:S.YELLOW,2:S.GREEN,3:S.LIGHT_PURPLE,4:S.GOLD},b=new Map([["api:entity",()=>new g],["api:entities",()=>new g],["api:player",()=>new g],["api:players",()=>new g],["api:greedy_string",()=>(0,e.greedyString)()],["brigadier:bool",()=>(0,e.bool)()],["brigadier:double",()=>(0,e.float)()],["brigadier:float",()=>(0,e.float)()],["brigadier:integer",()=>(0,e.integer)()],["brigadier:long",()=>(0,e.integer)()],["brigadier:string",()=>(0,e.string)()],["minecraft:angle",()=>new h],["minecraft:block_pos",()=>new s],["minecraft:block_predicate",()=>null],["minecraft:block_state",()=>null],["minecraft:color",()=>new l],["minecraft:column_pos",()=>new a],["minecraft:component",()=>null],["minecraft:dimension",()=>null],["minecraft:entity",()=>null],["minecraft:entity_anchor",()=>null],["minecraft:entity_summon",()=>null],["minecraft:float_range",()=>null],["minecraft:function",()=>null],["minecraft:game_profile",()=>new o],["minecraft:int_range",()=>null],["minecraft:item_enchantment",()=>null],["minecraft:item_predicate",()=>null],["minecraft:item_slot",()=>null],["minecraft:item_stack",()=>null],["minecraft:message",()=>(0,e.greedyString)()],["minecraft:mob_effect",()=>new d],["minecraft:nbt",()=>null],["minecraft:nbt_compound_tag",()=>null],["minecraft:nbt_path",()=>null],["minecraft:nbt_tag",()=>null],["minecraft:objective",()=>null],["minecraft:objective_criteria",()=>null],["minecraft:operation",()=>null],["minecraft:particle",()=>null],["minecraft:resource_location",()=>null],["minecraft:rotation",()=>null],["minecraft:score_holder",()=>null],["minecraft:scoreboard_slot",()=>null],["minecraft:swizzle",()=>null],["minecraft:team",()=>(0,e.word)()],["minecraft:time",()=>new i],["minecraft:uuid",()=>new c],["minecraft:vec2",()=>null],["minecraft:vec3",()=>null]]);function I(t){if(0===t.trim().length)return;function r(t){if(t.includes("..")){let r=t.split("..")[0],n=t.split("..")[1],i=Number.MIN_SAFE_INTEGER,s=Number.MAX_SAFE_INTEGER;return i=0===r.length?Number.MIN_SAFE_INTEGER:Number.parseFloat(r),s=0===n.length?Number.MAX_SAFE_INTEGER:Number.parseFloat(n),i%1!=0||s%1!=0?(0,e.float)(i,s):(s+=1,(0,e.integer)(i,s))}{const e=b.get(t);return null===e&&console.error("Argument type "+t+" doesn't exist"),e()?e():(console.error("Unimplemented argument: "+t),null)}}const n=t.split(" ")[0],i=t.split(" ").slice(1);let s=(0,e.literal)(n),a=[];const o=RegExp(/\((\w+(?:\|\w+)*)\)/),l=RegExp(/<(\w+)>\[([a-z:_]+|(?:[0-9\.]+)?\.\.(?:[0-9\.]+)?)\]/);for(let t of i){const n=t.match(o),i=t.match(l);if(n){const t=n[1].split("|");1===t.length?a.unshift((0,e.literal)(t[0])):t.length>1&&a.unshift((0,e.argument)(n[1],new u(t)))}else if(i){const t=i[1];let n=r(i[2]);a.unshift((0,e.argument)(t,n))}}if(a.length>0){const e=a[0].executes((e=>0));a.shift();const t=a.reduce(((e,t)=>t.then(e)),e);s=s.then(t)}T.register(s)}function v(){const e=document.getSelection();e.modify("extend","backward","paragraphboundary");const t=e.toString().length;return void 0!==e.anchorNode&&null!==e.anchorNode&&e.collapseToEnd(),t}function A(e,t){if(e>=0){const r=(e,t,n)=>{if(n||((n=document.createRange()).selectNode(e),n.setStart(e,0)),0===t.count)n.setEnd(e,t.count);else if(e&&t.count>0)if(e.nodeType===Node.TEXT_NODE){const r=e.textContent.length;r<t.count?t.count-=r:(n.setEnd(e,t.count),t.count=0)}else for(let i=0;i<e.childNodes.length&&(n=r(e.childNodes[i],t,n),0!==t.count);i++);return n};let n=r(t,{count:e});if(n){n.collapse(!1);let e=window.getSelection();e.removeAllRanges(),e.addRange(n)}}}class L{static canvas;static getTextWidth(e,t){const r=(L.canvas||(L.canvas=document.createElement("canvas"))).getContext("2d");return r.font=t.currentFont||(t.currentFont=L.getCanvasFont(t)),r.measureText(e).width}static getCssStyle(e,t){return window.getComputedStyle(e).getPropertyValue(t)}static getCanvasFont(e=document.body){return`${L.getCssStyle(e,"font-weight")||"normal"} ${L.getCssStyle(e,"font-size")||"16px"} ${L.getCssStyle(e,"font-family")||"Times New Roman"}`}}function M(e,t=null){if(e=e.replaceAll(" "," "),t||(t=p),t.innerHTML="",t===p){let e=document.createElement("span");e.innerText="/",t.appendChild(e)}let r="",n="";function i(e){if(r.length>0){let t=document.createElement("span");t.className=n,t.innerText=r,e.appendChild(t),r=""}}for(let s=0;s<e.length;s++)"§"!==e[s]?r+=e[s]:(i(t),n=R.get(e[s+1]),s++);i(t)}p.oninput=async function(){let e=v(),t=p.innerText.replace("\n","");t=t.replaceAll(" "," ");let r=!1,n="",i=[],s=!1;if(t.startsWith("/")){const e=t.slice(1),a=e.split(" ")[0],o=T.parse(e,m),u=T.parse(e.trimEnd(),m);console.log(o);let l=u.getContext().getRootNode();u.getContext().getNodes().length>0&&(l=u.getContext().getNodes()[u.getContext().getNodes().length-1].getNode());const d=T.getAllUsage(l,m,!1).join(" ");if(M(e),o.getExceptions().size>0)M(S.RED+e),n=o.getExceptions().entries().next().value[1].message;else{try{T.execute(o)}catch(t){M(S.RED+e),n=t.message,n.startsWith("Unknown command at position")&&(n=d,r=!0)}""===n&&(s=!0)}if(r||s){let t=a,r=0;for(const[n,i]of o.getContext().getArguments())r>Object.keys(N).length&&(r=0),t+=" ",t+=N[r],t+=e.slice(i.getRange().getStart(),i.getRange().getEnd()),r++;t+="".padEnd(e.length-e.trimEnd().length),M(t)}i=(await T.getCompletionSuggestions(o)).getList().map((e=>e.getText())),console.log(i)}if(0===e&&t.length>0&&(e=1),A(e,p),p.focus(),0!==n.length?(M(n,E),E.hidden=!1):E.hidden=!0,r?(E.style.left=L.getTextWidth(t,p)+"px",E.style.width=`calc(100% - ${E.style.left} - 28px + 10px)`):(E.style.left="0",E.style.width="unset"),s?(M(S.GREEN+"This command is valid ✅",C),C.hidden=!1):C.hidden=!0,w.style.left="0",0!==i.length){w.innerHTML="";for(let e of(e=>{let t=[];for(let r=0;r<e.length;r++){const n=document.createElement("span");n.innerText=e[r],0===r&&(n.className="yellow"),r!==e.length-1&&(n.innerText+="\n"),t.push(n)}return t})(i))w.appendChild(e);w.style.left=L.getTextWidth(t,p)+"px",w.hidden=!1,E.hidden=!0}else w.hidden=!0;window.dispatchEvent(new Event("suggestionsUpdated"))},p.addEventListener("keydown",(e=>{switch(e.key){case"Enter":e.preventDefault();break;case"ArrowDown":case"ArrowUp":if(!w.hidden)for(let t=0;t<w.children.length;t++)if("yellow"===w.children[t].className){w.children[t].className="","ArrowDown"==e.key?t===w.children.length-1?w.children[0].className="yellow":w.children[t+1].className="yellow":0===t?w.children[w.children.length-1].className="yellow":w.children[t-1].className="yellow",window.dispatchEvent(new Event("suggestionsUpdated"));break}break;case"Backspace":0===p.innerText.replace("\n","").length&&e.preventDefault();break;case"Tab":e.preventDefault(),M(function(e=!0){let t="";for(let r of p.children)r.className&&e&&(t+="§"+y.get(r.className)),t+=r.innerText;return t}(!1).slice(1)+_.innerText),p.oninput(null),A(p.innerText.length,p)}})),window.addEventListener("suggestionsUpdated",(e=>{const t=p.innerText.replaceAll(" "," ");if(w.hidden)M("",_);else{const e=document.querySelector(".yellow").innerText.trim();if(t!==e){const r=v(),n=-1===t.lastIndexOf(" ")?1:t.lastIndexOf(" ")+1;M(S.DARK_GRAY+e.slice(t.slice(n).length),_),A(r,p),p.focus()}else M("",_)}})),document.getElementById("chatbox").onclick=function(){p.focus()},document.getElementById("register-commands-button").onclick=function(){T.deleteAll(),x.value.split("\n").forEach(I),p.oninput(null)},x.value="fill <pos1>[minecraft:block_pos] <pos2>[minecraft:block_pos] <block>[brigadier:string]\nspeed (walk|fly) <speed>[0..10] <target>[minecraft:game_profile]\nhello <val>[1..20] <color>[minecraft:color]\nmyfunc <val>[minecraft:mob_effect]",document.getElementById("register-commands-button")?.onclick(null),console.log("Dispatcher",T.getRoot())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,